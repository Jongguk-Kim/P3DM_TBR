# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SMART_Input.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os 
import PTN_LIBRARY.ptn_library as PTN 

def RimWidth(rw, group='PCR', rimType='Tubeless'): 
    if group == 'TBR': 
        if rimType.lower() == "tubeless" or rimType.lower() == 'tl':
            rwDB = [[4.5, 114.3],[5.25,133.5],[6.0,152.5],[6.75,171.5],[7.5,190.5],[8.25,209.5],\
                        [9.0,228.5],[9.75,247.5],[10.5,266.7],[11.0,279.4],[11.25,285.8],\
                        [11.5,291.1],[11.75,298.5],[12.25,311.0],[12.5,317.5],[13.0,330.0],\
                        [13.25,336.6],[13.75,349.25],[14.0,355.5],[14.25,362.0],[14.75,374.7],[15.0,381.0],\
                        [15.25,387.4],[15.75,400.1],[16.0,406.5],[16.25,412.8],[16.75,425.5],[17.0,432.0],\
                        [17.25,438.2],[17.75,450.85],[18.0,457.0],[18.75,476.25]]
        else:
            rwDB = [[4.5,114.3],[5.0,127.0],[5.5,139.5],[6.0,152.5],[6.5,165.0],[7.0,178.0],[7.5,190.5],\
                [8.0,203.0],[8.5,216.0],[9.0,228.5],[9.5, 241.3],[10.0,254.0],[10.5,266.7],[11.0,279.4],\
                [11.5,292.1],[12.0,304.8],[12.5,317.5],[13.0,330.2],[13.5,342.9],[14.0,355.6],[14.5,368.3]]
    else:
        rwDB = [[2.5,63.5],[3.0,76.0],[3.5,89.0],[4.0,101.5],[4.5,114.5],[5.0,127.0],[5.5,139.5],\
                [6.0,152.5],[6.5,165.0],[7.0,178.0],[7.5,190.5],[8.0,203.0],[8.5,216.0],\
                [9.0,228.5],[9.5,241.5],[10.0,254.0],[10.5,266.5],[11.0,279.5],[11.5,292.0],\
                [12.0,305.0],[12.5,317.5],[13.0,330.0],[13.5,343.0],[14.0,355.5]]
    for w in rwDB : 
        if  w[0] == rw: 
            return w[1] 
    return 0.0
def RimDiameter(rd, group='PCR', rimType='Tubeless'): 
    if group == 'TBR': 
        if rimType.lower() == "tubeless" or rimType.lower() == 'tl':
            rdDB = [[17.5,444.5],[19.5,495.3],[22.5,571.5],[24.5,622.3],[26.5,673.1]]
        else:
            rdDB = [[15.0,387.4],[18.0,461.8],[20.0,514.4],[24.0,616.0]]
    else:
        rdDB = [[10.0,253.2],[12.0,304.0],[13.0,329.4],[14.0,354.8],[15.0,380.2],[16.0,405.6],[17.0,436.6],\
            [18.0,462.0],[19.0,487.4],[20.0,512.8],[21.0,538.2],[22.0,563.6],[23.0,589.0],[24.0,614.4],\
                [25.0,639.8],[26.0,665.2],[28.0,716.0],[30.0,766.8]]
    for r in rdDB : 
        if r[0] == rd: 
            return r[1] 
    return 0.0

class Ui_Dialog(object):
    def readMaterial(self, fName): 
        with open(fName) as In: 
            lines = In.readlines()
        self.solid=[]
        self.NoMaterial=[]
        self.includingMaterial=[]
        self.rebar = []
        self.beltRadius=[]
        self.underCcGa=1.0
        self.carcassGa=1.0
        self.carcassDrumDia = 0.0
        self.beltLift = 1.03
        self.tireCenterMinR=0.0
        self.RolledLayerGauge=[]
        mat = ""
        for line in lines: 
            cod = ""
            if "**" in line: 
                if "not in the material DB" in line: 
                    data = line.split(" ")
                    self.NoMaterial.append(data[2].strip())
                if "cord max radius lifted" in line: 
                    data = line.split(",")
                    data = data[1].split("=")
                    self.beltRadius.append([data[0].strip(), float(data[1].strip())])
                
                if "Rolled Layer gauge" in line: 
                    data = line.split(",")
                    data = data[1].split("=")
                    self.RolledLayerGauge.append([data[0].strip(), float(data[1].strip())])


                if "Under carcass gauge" in line: 
                    data = line.split("=")
                    self.underCcGa = float(data[1].strip())
                if "Carcass drum Dia" in line: 
                    data = line.split("=")
                    self.carcassDrumDia = float(data[1].strip())
                if "#1 Carcass gauge" in line: 
                    data = line.split("=")
                    self.carcassGa = float(data[1].strip())
                if "Belt Lift Ratio" in line: 
                    data = line.split("=")
                    self.beltLift = float(data[1].strip())
                if "Tire Center Min.Radius" in line: 
                    data = line.split("=")
                    self.tireCenterMinR = float(data[1].strip())

                continue 
            if "*" in line: 
                if "SOLID_SECTION" in line: 
                    mat = "SOLID"
                if "REBAR_SECTION" in line: 
                    mat = "REBAR"
                if "BELT_THICKNESS_SUBTRACTION" in line: 
                    mat = "BTW"
                if "IN_MOLDING_PCI_INFO" in line: 
                    
                    data = line.split(",")
                    # self.PCI = int(data[1].split("=")[1].strip())
                    # self.LowCure= int(data[2].split("=")[1].strip())
                    # try:      self.BSD = float(data[3].split("=")[1].strip())
                    # except:   self.BSD = 0.0
                    # try:      self.PCIRIMW = float(data[4].split("=")[1].strip())
                    # except:   self.PCIRIMW = 0.0
                    # self.BDWidth = float(data[5].split("=")[1].strip())
                    # try:
                    #     self.PCIPress  = float(data[6].split("=")[1].strip())
                    # except:
                    #     self.PCIPress = 2.0
                    # print(self.PCI, self.LowCure, self.BSD, self.PCIRIMW, self.BDWidth, self.PCIPress)
                    mat =""
                
                if "INCLUDE, INP" in line and ".axi" in line.lower(): 
                    data = line.split(",")
                    self.axi = data[1].split("=")[1].strip()
                    mat = ""
                if "INCLUDE, INP" in line and ".trd" in line.lower(): 
                    data = line.split(",")
                    self.trd = data[1].split("=")[1].strip()
                    mat = ""
                if "INCLUDE, INP" in line and (".pyn" in line.lower() or ".cor" in line.lower()): 
                    data = line.split(",")
                    data = data[1].split("=")[1].strip()
                    data = data.split("/")[-1]
                    self.includingMaterial.append(data)
                    mat = ""
                
                
            else: 
                if mat == "SOLID": 
                    data = line.split(",")
                    if len(data) > 4: 
                        self.solid.append([data[0].strip(), data[1].strip(), data[2].strip(), data[3].strip(), data[4].strip(), data[5].strip(), data[6].strip(), data[7].strip()])
                    else: 
                        self.solid.append([data[0], data[1], data[2], data[3].strip()])
                if mat == "REBAR":
                    data = line.split(",")
                    if len(data) > 8 : 
                        self.rebar.append([data[0].strip(), data[1].strip(), data[2].strip(), data[3].strip(),\
                             data[4].strip(), data[5].strip(), data[6].strip(), data[7].strip(), \
                                 data[8].strip(), data[9].strip(), data[10].strip(), data[11].strip()])
                    else: 
                        self.rebar.append([data[0].strip(), data[1].strip(), data[2].strip(), data[3].strip(),\
                             data[4].strip(), data[5].strip(), data[6].strip(), data[7].strip()])
                if mat == "BTW":
                    data = line.split(",") 
                    self.Between=data[0]
                    self.btSubtraction=float(data[1].strip())

    def openSample(self): 
        if os.path.isfile(self.sampleSaveFile): 
            with open(self.sampleSaveFile) as SF: 
                lines = SF.readlines()
            sampleFileDirectiory = lines[0].strip()
        else: 
            root  =self.saveFile.split("/")
            N = len(root)
            sampleFileDirectiory = ""
            for i, wd in enumerate(root) : 
                if i == N-1: 
                    break 
                sampleFileDirectiory += wd +"/"
        
        self.sampleSMART, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select SMART Input File",sampleFileDirectiory , "File(*.inp)") 

        if self.sampleSMART: 
            root  =self.sampleSMART.split("/")
            N = len(root)
            sampleFileDirectiory = ""
            for i, wd in enumerate(root) : 
                if i == N-1: 
                    break 
                sampleFileDirectiory += wd+"/"
            sf = open(self.sampleSaveFile, 'w')
            sf.write("%s\n"%(sampleFileDirectiory))
            sf.close()
            

            with open (self.sampleSMART) as SM: 
                lines = SM.readlines()
            cmd = ''
            for line in lines: 
                if "**" in line: 
                    continue 
                if "*" in line:  
                    if "SIMULATION_TIME" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        self.Edit_totalTime.setText(data[0].strip())
                        self.Edit_massScale.setText(data[1].strip())
                        dt = data[2].split(" ")
                        for d in dt: 
                            if d=="": continue 
                            ratio = d.strip() 
                            break 
                        self.Edit_DT_ratio.setText(ratio) 
                    elif "OUTPUT_CONTROL" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        self.Edit_stepTime.setText(data[0].strip())
                        dt = data[1].split(" ")
                        for d in dt: 
                            if d=="": continue 
                            value = d.strip() 
                            break 
                        self.Edit_averageTime.setText(value) 
                    elif "INFLATION_TIME" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        self.Edit_Inflation_Time1.setText(data[0].strip())
                        self.Edit_Inflation_Time2.setText(data[1].strip())
                        dt = data[2].split(" ")
                        for d in dt: 
                            if d=="": continue 
                            value = d.strip() 
                            break 
                        vel = float(value)
                        if vel > 0: 
                            self.Edit_velocity.setText(value) 
                            self.check_freespin.setChecked(True)
                    elif "SELF_CONTACT_ACTIVATION" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        if data[0].strip() == "0": 
                            self.check_Cavity.setChecked(False)
                        else: 
                            self.check_Cavity.setChecked(True)
                        dt = data[1].split(" ")
                        for d in dt: 
                            if d=="": continue 
                            value = d.strip() 
                            break 

                        if value == "0": 
                            self.check_kerf.setChecked(False)
                        else: 
                            self.check_kerf.setChecked(True)
                    elif "TEMPERATURE_ANALYSIS" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        if data[0].strip() == '1': self.groupBox_4.setChecked(True) 
                        else:  self.groupBox_4.setChecked(False) 
                        self.Edit_TempStartTime.setText(data[1].strip())
                        self.Edit_Temp_Air.setText(data[2].strip())
                        dt = data[3].split(" ")
                        for d in dt:
                            if d=="": continue 
                            value = d.strip() 
                            break 
                        self.Edit_Temp_Road.setText(value)
                    elif "PRESSURE_VARIANCE" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        if data[0].strip() == "0": 
                            self.check_pressVariance.setChecked(False)
                        else: 
                            self.check_pressVariance.setChecked(True)
                        
                        self.Edit_PressVarianceStartTime.setText(data[1].strip())
                        value = data[2].split("D")[0].strip()
                        self.Edit_rimCavityWidth.setText(value)
                        value = data[3].split("D")[0].strip()
                        self.Edit_rimCavityHeight.setText(value)
                    elif "RIM_OR_HUB_REAL_MASS" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        dt = words.split(" ")
                        for d in dt: 
                            if d=="": continue 
                            value = d.strip() 
                            break 
                        self.Edit_RimMass.setText(value)
                    elif "STEEL_BEAD_ELSET_FOR_SUB_CYCLING" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        self.Edit_SubCycling.setText(words.strip())
                    elif "GROOVE_DEPTH_FOR_FPC" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        self.Edit_FPC_depth.setText(words.strip())
                    elif "RIM_FRICTION" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        self.Edit_RimFriction.setText(words.strip())
                    elif "ROAD_FRICTION" in line: 
                        cmd = "FRIC"
                    elif "CONDITION_LOAD" in line:
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        self.Edit_pressKgf.setText(data[0].strip())
                        self.pressureKgf()
                        self.Edit_loadKgf.setText(data[2].strip())
                        self.loadKgf()
                        if not self.check_freespin.isChecked(): 
                            self.Edit_velocity.setText(data[3].strip())
                    elif "CAMBER_ANGLE" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        self.Edit_camber.setText(data[0].strip())
                    elif "LATERAL_CONTROL" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        self.Edit_lateral.setText(data[1].strip())
                        if data[0].strip() == '0':  ## force control 
                            self.check_lateralForce.setChecked(True)
                        else:                       ## slip angle control 
                            self.check_lateralForce.setChecked(False)
                    elif "ROTATION_CONTROL" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        self.Edit_Rotation.setText(data[1].strip())
                        if data[0].strip() == '0':   ## force control 
                            self.check_rotationForce.setChecked(True)
                            self.Edit_angularVelocity.setText("0")
                        else:                        ## slip ratio control 
                            self.check_rotationForce.setChecked(False)
                            try:
                                self.Edit_angularVelocity.setText(data[2].strip())
                            except:
                                pass 
                    
                    elif "ROAD_GEOM" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(" ")
                        for dt in data: 
                            if dt=="": continue 
                            value = dt 
                            break 
                        self.Edit_RoadDia.setText(value)
                    
                    elif "RIM_GEOM" in line: 
                        cmd = ''
                        words = line.split("=")[1]
                        data = words.split(",")
                        rd = float(data[0].strip())*2
                        self.Edit_RDmm.setText("%.1f"%(rd))
                        self.Edit_RDinch.setText("%.1f"%(rd/25.4))

                        rw = float(data[1].strip())*2
                        self.Edit_RWmm.setText("%.1f"%(rw))
                        self.Edit_RWInch.setText("%.1f"%(rw/25.4))

                        self.Edit_RimGeo.setText(data[2].strip())
                    else:
                        cmd = ''
                    
                else:
                    if cmd == "FRIC": 
                        data = line.split(",")
                        self.Edit_fric1.setText(data[0].strip())
                        self.Edit_fric2.setText(data[1].strip())
                        self.Edit_fric3.setText(data[2].strip())
                        self.Edit_fric4.setText(data[3].strip())
                        self.Edit_fric5.setText(data[4].strip())
                        self.Edit_fric6.setText(data[5].strip())
                        self.Edit_fric7.setText(data[6].strip())
                        self.Edit_fric8.setText(data[7].strip())
                    
                        
                    # if "" in line: 
                        
                    # if "" in line: 

    def __init__(self, materialDir, cordDB, fullmeshSave, layoutGD, pciPress, bsd, bdw, drw, solidList, localCordDBFileName, kerfContact, PCI): 
        self.saveFile = fullmeshSave + "-SMART.inp"
        self.saveDefaultFile="SMART_Default.dat"
        self.sampleSaveFile = "saveSampleDir.dat"
        self.tireGroup=1
        self.PCITime1 = 0.01 
        self.PCITime2 = 0.015 
        self.totalTime = 0.0 
        self.delTime = 0.01
        self.avgTime = 0.05 
        self.massScale = 1.02 
        self.DtRatio = 1.0 
        self.kerfContact = 0 
        self.initKerfContact = kerfContact
        self.cavityContact = 0 
        self.GD = layoutGD*1000
        self.TemperatureAnalysis = 1 
        self.TempStart = 0.04 
        self.TempAir = 25.0 
        self.TempRoad = 25.0 
        self.PressVariance = 0 
        self.PressVarianceStart = 0.04 
        self.HubWidth = 0.1 
        self.HubHeight = 0.5 
        self.TempResult = 0 
        self.TempResultFile = " ../TEMP/C100_NB08.TEMPER"
        self.axi=""
        self.trd=""
        self.btSubtraction=4.61E-04 
        self.Between = "BETWEEN_BELTS"

        self.rimMass = 1.0 
        self.ElsetSubcycling = "BD1"
        self.FPC = 0.001 
        
        self.Press = 0.0
        self.Load = 0.0
        self.Velocity = 0.0 
        self.freeSpin = 0 
        self.Camber= 0.0
        self.lateralForce = 0 
        self.lateralValue = 0.0 
        self.rotationForce = 0 
        self.rotationValue = 0.0 
        self.angularVelocity = 0.0
        self.RW = 0.0
        self.RD = 0.0 
        self.roadDia = 0.0 

        self.PCI = PCI 
        self.LowCure = 0 
        
        
        self.rimFriction = 1.0 
        self.roadFriction=[0, 0, 0, 0, 0, 0, 0, 0]

        self.surf_tread='XTRD1001'
        self.surf_body = 'TIREBODY'
        self.surf_press = 'PRESS'
        self.surf_RimL = "RIC_L"
        self.surf_RimR = "RIC_R"

        self.stiffness = 1 
        self.KV = 24.6 
        self.KL = 20.03
        self.KT = 30.3 

        self.material=materialDir
        try:
            with open(cordDB) as DB: 
                lines = DB.readlines()
            self.cord =lines[0].strip()
        except:
            self.cord = materialDir +"/CordDB_SLM_PCI_v2.txt" 

        self.materialFile = fullmeshSave + "-material.dat"
        self.readMaterial(self.materialFile)

        self.BSD = bsd 
        self.BDWidth = bdw 
        self.PCIPress = pciPress 
        self.PCIRIMW = drw

        self.cordDB = cordDB 
        self.solidListFile = solidList 
        self.localCordDBFile = localCordDBFileName


    def setupUi(self, Dialog, pciPress):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1170, 1038)
        Dialog.setMaximumSize(QtCore.QSize(1170, 1040))

        self.gridLayout_2 = QtWidgets.QGridLayout(Dialog)
        self.gridLayout_2.setObjectName("Window_gridLayout_2")
        

        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setMinimumSize(QtCore.QSize(571, 0))
        self.groupBox.setMaximumSize(QtCore.QSize(571, 437))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 20, 61, 16))
        self.label.setObjectName("label")
        self.Edit_pressKgf = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_pressKgf.setGeometry(QtCore.QRect(130, 20, 71, 20))
        self.Edit_pressKgf.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_pressKgf.setObjectName("Edit_pressKgf")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(210, 20, 51, 16))
        self.label_2.setObjectName("label_2")
        self.Edit_presskPa = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_presskPa.setGeometry(QtCore.QRect(270, 20, 71, 20))
        self.Edit_presskPa.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_presskPa.setObjectName("Edit_presskPa")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(350, 20, 31, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(470, 20, 31, 16))
        self.label_4.setObjectName("label_4")
        self.Edit_pressPSI = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_pressPSI.setGeometry(QtCore.QRect(390, 20, 71, 20))
        self.Edit_pressPSI.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_pressPSI.setObjectName("Edit_pressPSI")
        self.label_6 = QtWidgets.QLabel(self.groupBox)
        self.label_6.setGeometry(QtCore.QRect(350, 45, 31, 16))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox)
        self.label_7.setGeometry(QtCore.QRect(10, 45, 61, 16))
        self.label_7.setObjectName("label_7")
        self.Edit_loadLbs = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_loadLbs.setGeometry(QtCore.QRect(270, 45, 71, 20))
        self.Edit_loadLbs.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_loadLbs.setObjectName("Edit_loadLbs")
        self.Edit_loadKgf = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_loadKgf.setGeometry(QtCore.QRect(130, 45, 71, 20))
        self.Edit_loadKgf.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_loadKgf.setObjectName("Edit_loadKgf")
        self.label_8 = QtWidgets.QLabel(self.groupBox)
        self.label_8.setGeometry(QtCore.QRect(210, 45, 51, 16))
        self.label_8.setObjectName("label_8")
        self.Edit_velocity = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_velocity.setGeometry(QtCore.QRect(130, 70, 71, 20))
        self.Edit_velocity.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_velocity.setObjectName("Edit_velocity")
        self.label_15 = QtWidgets.QLabel(self.groupBox)
        self.label_15.setGeometry(QtCore.QRect(10, 70, 61, 16))
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.groupBox)
        self.label_16.setGeometry(QtCore.QRect(210, 70, 51, 16))
        self.label_16.setObjectName("label_16")
        self.check_freespin = QtWidgets.QCheckBox(self.groupBox)
        self.check_freespin.setGeometry(QtCore.QRect(263, 70, 81, 16))
        self.check_freespin.setObjectName("check_freespin")
        self.check_lateralForce = QtWidgets.QCheckBox(self.groupBox)
        self.check_lateralForce.setGeometry(QtCore.QRect(263, 120, 141, 16))
        self.check_lateralForce.setObjectName("check_lateralForce")
        self.Edit_lateral = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_lateral.setGeometry(QtCore.QRect(130, 120, 71, 20))
        self.Edit_lateral.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_lateral.setObjectName("Edit_lateral")
        self.label_18 = QtWidgets.QLabel(self.groupBox)
        self.label_18.setGeometry(QtCore.QRect(10, 120, 111, 16))
        self.label_18.setObjectName("label_18")
        self.label_17 = QtWidgets.QLabel(self.groupBox)
        self.label_17.setGeometry(QtCore.QRect(210, 120, 51, 16))
        self.label_17.setObjectName("label_17")
        self.check_rotationForce = QtWidgets.QCheckBox(self.groupBox)
        self.check_rotationForce.setGeometry(QtCore.QRect(263, 144, 71, 16))
        self.check_rotationForce.setObjectName("check_rotationForce")
        self.Edit_Rotation = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_Rotation.setGeometry(QtCore.QRect(130, 144, 71, 20))
        self.Edit_Rotation.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Rotation.setObjectName("Edit_Rotation")
        self.label_19 = QtWidgets.QLabel(self.groupBox)
        self.label_19.setGeometry(QtCore.QRect(10, 144, 111, 16))
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(self.groupBox)
        self.label_20.setGeometry(QtCore.QRect(210, 144, 51, 16))
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.groupBox)
        self.label_21.setGeometry(QtCore.QRect(318, 144, 81, 16))
        self.label_21.setObjectName("label_21")
        self.Edit_angularVelocity = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_angularVelocity.setGeometry(QtCore.QRect(387, 144, 61, 20))
        self.Edit_angularVelocity.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_angularVelocity.setObjectName("Edit_angularVelocity")
        self.label_22 = QtWidgets.QLabel(self.groupBox)
        self.label_22.setGeometry(QtCore.QRect(10, 374, 541, 16))
        self.label_22.setObjectName("label_22")
        self.label_9 = QtWidgets.QLabel(self.groupBox)
        self.label_9.setGeometry(QtCore.QRect(10, 169, 61, 16))
        self.label_9.setObjectName("label_9")
        self.label_13 = QtWidgets.QLabel(self.groupBox)
        self.label_13.setGeometry(QtCore.QRect(350, 169, 31, 16))
        self.label_13.setObjectName("label_13")
        self.Edit_RWmm = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_RWmm.setGeometry(QtCore.QRect(270, 169, 71, 20))
        self.Edit_RWmm.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_RWmm.setObjectName("Edit_RWmm")
        self.Edit_RWInch = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_RWInch.setGeometry(QtCore.QRect(130, 169, 71, 20))
        self.Edit_RWInch.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_RWInch.setObjectName("Edit_RWInch")
        self.label_10 = QtWidgets.QLabel(self.groupBox)
        self.label_10.setGeometry(QtCore.QRect(210, 169, 51, 16))
        self.label_10.setObjectName("label_10")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 393, 551, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.Edit_fric1 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.Edit_fric1.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_fric1.setObjectName("Edit_fric1")
        self.horizontalLayout.addWidget(self.Edit_fric1)
        self.Edit_fric2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.Edit_fric2.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_fric2.setObjectName("Edit_fric2")
        self.horizontalLayout.addWidget(self.Edit_fric2)
        self.Edit_fric3 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.Edit_fric3.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_fric3.setObjectName("Edit_fric3")
        self.horizontalLayout.addWidget(self.Edit_fric3)
        self.Edit_fric4 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.Edit_fric4.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_fric4.setObjectName("Edit_fric4")
        self.horizontalLayout.addWidget(self.Edit_fric4)
        self.Edit_fric5 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.Edit_fric5.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_fric5.setObjectName("Edit_fric5")
        self.horizontalLayout.addWidget(self.Edit_fric5)
        self.Edit_fric6 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.Edit_fric6.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_fric6.setObjectName("Edit_fric6")
        self.horizontalLayout.addWidget(self.Edit_fric6)
        self.Edit_fric7 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.Edit_fric7.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_fric7.setObjectName("Edit_fric7")
        self.horizontalLayout.addWidget(self.Edit_fric7)
        self.Edit_fric8 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.Edit_fric8.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_fric8.setObjectName("Edit_fric8")
        self.horizontalLayout.addWidget(self.Edit_fric8)
        self.Edit_RoadDia = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_RoadDia.setGeometry(QtCore.QRect(130, 220, 71, 20))
        self.Edit_RoadDia.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_RoadDia.setObjectName("Edit_RoadDia")
        self.label_27 = QtWidgets.QLabel(self.groupBox)
        self.label_27.setGeometry(QtCore.QRect(10, 220, 101, 16))
        self.label_27.setObjectName("label_27")
        self.label_28 = QtWidgets.QLabel(self.groupBox)
        self.label_28.setGeometry(QtCore.QRect(210, 220, 71, 16))
        self.label_28.setObjectName("label_28")
        self.label_39 = QtWidgets.QLabel(self.groupBox)
        self.label_39.setGeometry(QtCore.QRect(350, 195, 31, 16))
        self.label_39.setObjectName("label_39")
        self.Edit_RDmm = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_RDmm.setGeometry(QtCore.QRect(270, 195, 71, 20))
        self.Edit_RDmm.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_RDmm.setObjectName("Edit_RDmm")
        self.label_40 = QtWidgets.QLabel(self.groupBox)
        self.label_40.setGeometry(QtCore.QRect(10, 195, 91, 16))
        self.label_40.setObjectName("label_40")
        self.Edit_RDinch = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_RDinch.setGeometry(QtCore.QRect(130, 195, 71, 20))
        self.Edit_RDinch.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_RDinch.setObjectName("Edit_RDinch")
        self.label_41 = QtWidgets.QLabel(self.groupBox)
        self.label_41.setGeometry(QtCore.QRect(210, 195, 51, 16))
        self.label_41.setObjectName("label_41")
        self.Edit_RimFriction = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_RimFriction.setGeometry(QtCore.QRect(130, 351, 71, 20))
        self.Edit_RimFriction.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_RimFriction.setObjectName("Edit_RimFriction")
        self.label_50 = QtWidgets.QLabel(self.groupBox)
        self.label_50.setGeometry(QtCore.QRect(10, 351, 81, 16))
        self.label_50.setObjectName("label_50")

        self.Edit_coreWidth = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_coreWidth.setGeometry(QtCore.QRect(440, 250, 71, 20))
        self.Edit_coreWidth.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_coreWidth.setObjectName("Edit_coreWidth")
        self.check_LowCure = QtWidgets.QCheckBox(self.groupBox)
        self.check_LowCure.setGeometry(QtCore.QRect(11, 250, 171, 16))
        self.check_LowCure.setChecked(False)
        self.check_LowCure.setObjectName("check_LowCure")
        self.Edit_BSD = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_BSD.setGeometry(QtCore.QRect(251, 250, 61, 20))
        self.Edit_BSD.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_BSD.setObjectName("Edit_BSD")
        self.label_73 = QtWidgets.QLabel(self.groupBox)
        self.label_73.setGeometry(QtCore.QRect(321, 250, 121, 16))
        self.label_73.setObjectName("label_73")
        self.label_72 = QtWidgets.QLabel(self.groupBox)
        self.label_72.setGeometry(QtCore.QRect(191, 250, 61, 16))
        self.label_72.setObjectName("label_72")
        self.label_camber_deg = QtWidgets.QLabel(self.groupBox)
        self.label_camber_deg.setGeometry(QtCore.QRect(210, 95, 31, 20))
        self.label_camber_deg.setObjectName("label_camber_deg")
        self.Edit_camber = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_camber.setGeometry(QtCore.QRect(130, 95, 71, 20))
        self.Edit_camber.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_camber.setObjectName("Edit_camber")
        self.label_camber = QtWidgets.QLabel(self.groupBox)
        self.label_camber.setGeometry(QtCore.QRect(10, 94, 51, 16))
        self.label_camber.setObjectName("label_camber")
        self.Edit_RimGeo = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_RimGeo.setGeometry(QtCore.QRect(270, 220, 281, 20))
        self.Edit_RimGeo.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.Edit_RimGeo.setObjectName("Edit_RimGeo")

        self.check_GroupTBR = QtWidgets.QCheckBox(self.groupBox)
        self.check_GroupTBR.setGeometry(QtCore.QRect(397, 182, 51, 16))
        self.check_GroupTBR.setObjectName("check_GroupTBR")
        self.check_Tube = QtWidgets.QCheckBox(self.groupBox)
        self.check_Tube.setGeometry(QtCore.QRect(457, 182, 91, 16))
        self.check_Tube.setObjectName("check_Tube")

        self.Edit_SA_Start = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_SA_Start.setGeometry(QtCore.QRect(387, 120, 61, 20))
        self.Edit_SA_Start.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_SA_Start.setObjectName("Edit_SA_Start")
        self.label_RelaxationFy_SA = QtWidgets.QLabel(self.groupBox)
        self.label_RelaxationFy_SA.setGeometry(QtCore.QRect(350, 100, 101, 20))
        self.label_RelaxationFy_SA.setObjectName("label_RelaxationFy_SA")
        self.Edit_SA_TimeStart = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_SA_TimeStart.setGeometry(QtCore.QRect(458, 120, 51, 20))
        self.Edit_SA_TimeStart.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_SA_TimeStart.setObjectName("Edit_SA_TimeStart")
        self.Edit_SA_TimeDuration = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_SA_TimeDuration.setGeometry(QtCore.QRect(510, 120, 51, 20))
        self.Edit_SA_TimeDuration.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_SA_TimeDuration.setObjectName("Edit_SA_TimeDuration")
        self.label_RelaxationFy_Time = QtWidgets.QLabel(self.groupBox)
        self.label_RelaxationFy_Time.setGeometry(QtCore.QRect(459, 100, 111, 20))
        self.label_RelaxationFy_Time.setObjectName("label_RelaxationFy_Time")
        self.Edit_SR_TimeDuration = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_SR_TimeDuration.setGeometry(QtCore.QRect(510, 144, 51, 20))
        self.Edit_SR_TimeDuration.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_SR_TimeDuration.setObjectName("Edit_SR_TimeDuration")
        self.Edit_SR_TimeStart = QtWidgets.QLineEdit(self.groupBox)
        self.Edit_SR_TimeStart.setGeometry(QtCore.QRect(458, 144, 51, 20))
        self.Edit_SR_TimeStart.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_SR_TimeStart.setObjectName("Edit_SR_TimeStart")


        self.groupBox_Check = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_Check.setGeometry(QtCore.QRect(9, 274, 551, 71))
        self.groupBox_Check.setCheckable(True)

        self.gridLayout_2.addWidget(self.groupBox, 1, 2, 1, 3)

        if self.PCI == 1:     self.groupBox_Check.setChecked(True)
        else:                 self.groupBox_Check.setChecked(False)
        self.groupBox_Check.setObjectName("groupBox_Check")
        self.label_65 = QtWidgets.QLabel(self.groupBox_Check)
        self.label_65.setGeometry(QtCore.QRect(10, 45, 61, 16))
        self.label_65.setObjectName("label_65")
        self.label_66 = QtWidgets.QLabel(self.groupBox_Check)
        self.label_66.setGeometry(QtCore.QRect(10, 20, 61, 16))
        self.label_66.setObjectName("label_66")
        self.Edit_PCI_press_kPa = QtWidgets.QLineEdit(self.groupBox_Check)
        self.Edit_PCI_press_kPa.setGeometry(QtCore.QRect(270, 20, 71, 20))
        self.Edit_PCI_press_kPa.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_PCI_press_kPa.setObjectName("Edit_PCI_press_kPa")
        self.label_67 = QtWidgets.QLabel(self.groupBox_Check)
        self.label_67.setGeometry(QtCore.QRect(210, 45, 51, 16))
        self.label_67.setObjectName("label_67")
        
        self.Edit_PCI_press_psi = QtWidgets.QLineEdit(self.groupBox_Check)
        self.Edit_PCI_press_psi.setGeometry(QtCore.QRect(390, 20, 71, 20))
        self.Edit_PCI_press_psi.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_PCI_press_psi.setObjectName("Edit_PCI_press_psi")
        self.label_68 = QtWidgets.QLabel(self.groupBox_Check)
        self.label_68.setGeometry(QtCore.QRect(350, 20, 31, 16))
        self.label_68.setObjectName("label_68")
        self.Edit_PCI_press_kgf = QtWidgets.QLineEdit(self.groupBox_Check)
        self.Edit_PCI_press_kgf.setGeometry(QtCore.QRect(130, 20, 71, 20))
        self.Edit_PCI_press_kgf.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_PCI_press_kgf.setObjectName("Edit_PCI_press_kgf")
        self.label_69 = QtWidgets.QLabel(self.groupBox_Check)
        self.label_69.setGeometry(QtCore.QRect(210, 20, 51, 16))
        self.label_69.setObjectName("label_69")

        self.Edit_PCI_RW_inch = QtWidgets.QLineEdit(self.groupBox_Check)
        self.Edit_PCI_RW_inch.setGeometry(QtCore.QRect(270, 45, 71, 20))
        # self.Edit_PCI_RW_mm.setGeometry(QtCore.QRect(270, 45, 71, 20))
        self.Edit_PCI_RW_inch.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_PCI_RW_inch.setObjectName("Edit_PCI_RW_inch")

        self.Edit_PCI_RW_mm = QtWidgets.QLineEdit(self.groupBox_Check)
        self.Edit_PCI_RW_mm.setGeometry(QtCore.QRect(130, 45, 71, 20))
        # self.Edit_PCI_RW_inch.setGeometry(QtCore.QRect(130, 45, 71, 20))
        self.Edit_PCI_RW_mm.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_PCI_RW_mm.setObjectName("Edit_PCI_RW_mm")
        
        self.label_70 = QtWidgets.QLabel(self.groupBox_Check)
        self.label_70.setGeometry(QtCore.QRect(350, 45, 31, 16))
        self.label_70.setObjectName("label_70")
        self.label_71 = QtWidgets.QLabel(self.groupBox_Check)
        self.label_71.setGeometry(QtCore.QRect(470, 20, 31, 16))
        self.label_71.setObjectName("label_71")
        
        
        self.groupBox_2 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_2.setMinimumSize(QtCore.QSize(571, 0))
        self.groupBox_2.setMaximumSize(QtCore.QSize(571, 437))
        self.groupBox_2.setObjectName("groupBox_2")
        self.Edit_Inflation_Time1 = QtWidgets.QLineEdit(self.groupBox_2)
        self.Edit_Inflation_Time1.setGeometry(QtCore.QRect(140, 20, 71, 20))
        self.Edit_Inflation_Time1.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Inflation_Time1.setObjectName("Edit_Inflation_Time1")
        self.label_11 = QtWidgets.QLabel(self.groupBox_2)
        self.label_11.setGeometry(QtCore.QRect(10, 20, 121, 16))
        self.label_11.setObjectName("label_11")
        self.label_29 = QtWidgets.QLabel(self.groupBox_2)
        self.label_29.setGeometry(QtCore.QRect(220, 20, 21, 16))
        self.label_29.setObjectName("label_29")
        self.label_30 = QtWidgets.QLabel(self.groupBox_2)
        self.label_30.setGeometry(QtCore.QRect(220, 50, 51, 16))
        self.label_30.setObjectName("label_30")
        self.label_31 = QtWidgets.QLabel(self.groupBox_2)
        self.label_31.setGeometry(QtCore.QRect(10, 50, 111, 16))
        self.label_31.setObjectName("label_31")
        self.Edit_totalTime = QtWidgets.QLineEdit(self.groupBox_2)
        self.Edit_totalTime.setGeometry(QtCore.QRect(140, 50, 71, 20))
        self.Edit_totalTime.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_totalTime.setObjectName("Edit_totalTime")
        self.Edit_Inflation_Time2 = QtWidgets.QLineEdit(self.groupBox_2)
        self.Edit_Inflation_Time2.setGeometry(QtCore.QRect(240, 20, 71, 20))
        self.Edit_Inflation_Time2.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Inflation_Time2.setObjectName("Edit_Inflation_Time2")
        self.label_32 = QtWidgets.QLabel(self.groupBox_2)
        self.label_32.setGeometry(QtCore.QRect(330, 20, 51, 16))
        self.label_32.setObjectName("label_32")
        self.label_33 = QtWidgets.QLabel(self.groupBox_2)
        self.label_33.setGeometry(QtCore.QRect(220, 80, 51, 16))
        self.label_33.setObjectName("label_33")
        self.label_34 = QtWidgets.QLabel(self.groupBox_2)
        self.label_34.setGeometry(QtCore.QRect(10, 80, 131, 16))
        self.label_34.setObjectName("label_34")
        self.Edit_stepTime = QtWidgets.QLineEdit(self.groupBox_2)
        self.Edit_stepTime.setGeometry(QtCore.QRect(140, 80, 71, 20))
        self.Edit_stepTime.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_stepTime.setObjectName("Edit_stepTime")
        self.label_35 = QtWidgets.QLabel(self.groupBox_2)
        self.label_35.setGeometry(QtCore.QRect(500, 80, 51, 16))
        self.label_35.setObjectName("label_35")
        self.Edit_averageTime = QtWidgets.QLineEdit(self.groupBox_2)
        self.Edit_averageTime.setGeometry(QtCore.QRect(420, 80, 71, 20))
        self.Edit_averageTime.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_averageTime.setObjectName("Edit_averageTime")
        self.label_36 = QtWidgets.QLabel(self.groupBox_2)
        self.label_36.setGeometry(QtCore.QRect(260, 80, 141, 16))
        self.label_36.setObjectName("label_36")
        self.Edit_DT_ratio = QtWidgets.QLineEdit(self.groupBox_2)
        self.Edit_DT_ratio.setGeometry(QtCore.QRect(420, 110, 71, 20))
        self.Edit_DT_ratio.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_DT_ratio.setObjectName("Edit_DT_ratio")
        self.Edit_massScale = QtWidgets.QLineEdit(self.groupBox_2)
        self.Edit_massScale.setGeometry(QtCore.QRect(140, 110, 71, 20))
        self.Edit_massScale.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_massScale.setObjectName("Edit_massScale")
        self.label_37 = QtWidgets.QLabel(self.groupBox_2)
        self.label_37.setGeometry(QtCore.QRect(10, 110, 131, 16))
        self.label_37.setObjectName("label_37")
        self.label_38 = QtWidgets.QLabel(self.groupBox_2)
        self.label_38.setGeometry(QtCore.QRect(260, 110, 141, 16))
        self.label_38.setObjectName("label_38")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 140, 551, 71))
        self.groupBox_3.setObjectName("groupBox_3")
        self.check_kerf = QtWidgets.QCheckBox(self.groupBox_3)
        self.check_kerf.setGeometry(QtCore.QRect(20, 20, 141, 16))
        self.check_kerf.setObjectName("check_kerf")
        self.check_Cavity = QtWidgets.QCheckBox(self.groupBox_3)
        self.check_Cavity.setGeometry(QtCore.QRect(250, 20, 141, 16))
        self.check_Cavity.setObjectName("check_Cavity")
        self.Edit_grooveDepth = QtWidgets.QLineEdit(self.groupBox_3)
        self.Edit_grooveDepth.setGeometry(QtCore.QRect(130, 45, 71, 20))
        self.Edit_grooveDepth.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_grooveDepth.setObjectName("Edit_grooveDepth")
        self.label_42 = QtWidgets.QLabel(self.groupBox_3)
        self.label_42.setGeometry(QtCore.QRect(20, 45, 111, 16))
        self.label_42.setObjectName("label_42")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 220, 551, 191))
        self.groupBox_4.setCheckable(True)
        self.groupBox_4.setObjectName("groupBox_4")
        self.Edit_TempStartTime = QtWidgets.QLineEdit(self.groupBox_4)
        self.Edit_TempStartTime.setGeometry(QtCore.QRect(110, 20, 71, 20))
        self.Edit_TempStartTime.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_TempStartTime.setObjectName("Edit_TempStartTime")
        self.label_43 = QtWidgets.QLabel(self.groupBox_4)
        self.label_43.setGeometry(QtCore.QRect(10, 20, 111, 16))
        self.label_43.setObjectName("label_43")
        self.label_44 = QtWidgets.QLabel(self.groupBox_4)
        self.label_44.setGeometry(QtCore.QRect(10, 50, 111, 16))
        self.label_44.setObjectName("label_44")
        self.Edit_Temp_Air = QtWidgets.QLineEdit(self.groupBox_4)
        self.Edit_Temp_Air.setGeometry(QtCore.QRect(120, 50, 71, 20))
        self.Edit_Temp_Air.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Temp_Air.setObjectName("Edit_Temp_Air")
        self.label_45 = QtWidgets.QLabel(self.groupBox_4)
        self.label_45.setGeometry(QtCore.QRect(220, 50, 111, 16))
        self.label_45.setObjectName("label_45")
        self.Edit_Temp_Road = QtWidgets.QLineEdit(self.groupBox_4)
        self.Edit_Temp_Road.setGeometry(QtCore.QRect(340, 50, 71, 20))
        self.Edit_Temp_Road.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Temp_Road.setObjectName("Edit_Temp_Road")
        self.check_pressVariance = QtWidgets.QCheckBox(self.groupBox_4)
        self.check_pressVariance.setGeometry(QtCore.QRect(10, 80, 201, 16))
        self.check_pressVariance.setObjectName("check_pressVariance")
        self.Edit_PressVarianceStartTime = QtWidgets.QLineEdit(self.groupBox_4)
        self.Edit_PressVarianceStartTime.setGeometry(QtCore.QRect(210, 80, 71, 20))
        self.Edit_PressVarianceStartTime.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_PressVarianceStartTime.setObjectName("Edit_PressVarianceStartTime")
        self.label_46 = QtWidgets.QLabel(self.groupBox_4)
        self.label_46.setGeometry(QtCore.QRect(190, 20, 51, 16))
        self.label_46.setObjectName("label_46")
        self.label_47 = QtWidgets.QLabel(self.groupBox_4)
        self.label_47.setGeometry(QtCore.QRect(290, 80, 51, 16))
        self.label_47.setObjectName("label_47")
        self.Edit_rimCavityHeight = QtWidgets.QLineEdit(self.groupBox_4)
        self.Edit_rimCavityHeight.setGeometry(QtCore.QRect(340, 105, 71, 20))
        self.Edit_rimCavityHeight.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_rimCavityHeight.setObjectName("Edit_rimCavityHeight")
        self.Edit_rimCavity = QtWidgets.QLabel(self.groupBox_4)
        self.Edit_rimCavity.setGeometry(QtCore.QRect(250, 105, 61, 16))
        self.Edit_rimCavity.setObjectName("Edit_rimCavity")
        self.label_49 = QtWidgets.QLabel(self.groupBox_4)
        self.label_49.setGeometry(QtCore.QRect(30, 105, 131, 16))
        self.label_49.setObjectName("label_49")
        self.Edit_rimCavityWidth = QtWidgets.QLineEdit(self.groupBox_4)
        self.Edit_rimCavityWidth.setGeometry(QtCore.QRect(160, 105, 71, 20))
        self.Edit_rimCavityWidth.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_rimCavityWidth.setObjectName("Edit_rimCavityWidth")

        self.radio_Temp = QtWidgets.QRadioButton(self.groupBox_4)
        self.radio_Temp.setGeometry(QtCore.QRect(10, 138, 151, 16))
        self.radio_Temp.setChecked(True)
        self.radio_Temp.setObjectName("radio_Temp")
        

        self._tempOut = QtWidgets.QRadioButton(self.groupBox_4)
        self._tempOut.setGeometry(QtCore.QRect(170, 138, 111, 16))
        self._tempOut.setObjectName("_tempOut")
        self._tempOut.clicked.connect(self.TempReadInOut)
        self.radio_TempReading = QtWidgets.QRadioButton(self.groupBox_4)
        self.radio_TempReading.setGeometry(QtCore.QRect(290, 138, 111, 16))
        self.radio_TempReading.setObjectName("radio_TempReading")
        self.radio_TempReading.clicked.connect(self.TempReadInOut)

        self.Edit_tempFile = QtWidgets.QLineEdit(self.groupBox_4)
        self.Edit_tempFile.setGeometry(QtCore.QRect(30, 160, 501, 20))
        self.Edit_tempFile.setObjectName("Edit_tempFile")

        if self.radio_Temp.isChecked() :  
            self.Edit_tempFile.setDisabled(True)
        self.radio_Temp.clicked.connect(self.TempReadInOut)


        self.groupBox_5 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_5.setMinimumSize(QtCore.QSize(1150, 400))
        self.groupBox_5.setMaximumSize(QtCore.QSize(1150, 541))
        self.groupBox_5.setObjectName("groupBox_5")
        self.Edit_axiFile = QtWidgets.QLineEdit(self.groupBox_5)
        self.Edit_axiFile.setGeometry(QtCore.QRect(90, 20, 461, 20))
        self.Edit_axiFile.setObjectName("Edit_axiFile")
        self.label_51 = QtWidgets.QLabel(self.groupBox_5)
        self.label_51.setGeometry(QtCore.QRect(10, 20, 81, 16))
        self.label_51.setObjectName("label_51")
        self.Edit_trdFile = QtWidgets.QLineEdit(self.groupBox_5)
        self.Edit_trdFile.setGeometry(QtCore.QRect(90, 45, 461, 20))
        self.Edit_trdFile.setObjectName("Edit_trdFile")
        self.label_52 = QtWidgets.QLabel(self.groupBox_5)
        self.label_52.setGeometry(QtCore.QRect(10, 45, 81, 16))
        self.label_52.setObjectName("label_52")
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox_6.setGeometry(QtCore.QRect(590, 20, 551, 80))
        self.groupBox_6.setObjectName("groupBox_6")
        self.Edit_Surf_XTRD = QtWidgets.QLineEdit(self.groupBox_6)
        self.Edit_Surf_XTRD.setGeometry(QtCore.QRect(50, 20, 90, 20))
        self.Edit_Surf_XTRD.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Surf_XTRD.setObjectName("Edit_Surf_XTRD")
        self.label_53 = QtWidgets.QLabel(self.groupBox_6)
        self.label_53.setGeometry(QtCore.QRect(10, 20, 51, 16))
        self.label_53.setObjectName("label_53")
        self.Edit_Surf_TireBody = QtWidgets.QLineEdit(self.groupBox_6)
        self.Edit_Surf_TireBody.setGeometry(QtCore.QRect(200, 20, 90, 20))
        self.Edit_Surf_TireBody.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Surf_TireBody.setObjectName("Edit_Surf_TireBody")
        self.label_54 = QtWidgets.QLabel(self.groupBox_6)
        self.label_54.setGeometry(QtCore.QRect(160, 20, 51, 16))
        self.label_54.setObjectName("label_54")
        self.label_55 = QtWidgets.QLabel(self.groupBox_6)
        self.label_55.setGeometry(QtCore.QRect(310, 20, 51, 16))
        self.label_55.setObjectName("label_55")
        self.Edit_Surf_Press = QtWidgets.QLineEdit(self.groupBox_6)
        self.Edit_Surf_Press.setGeometry(QtCore.QRect(350, 20, 90, 20))
        self.Edit_Surf_Press.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Surf_Press.setObjectName("Edit_Surf_Press")
        self.Edit_Surf_RicL = QtWidgets.QLineEdit(self.groupBox_6)
        self.Edit_Surf_RicL.setGeometry(QtCore.QRect(50, 50, 90, 20))
        self.Edit_Surf_RicL.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Surf_RicL.setObjectName("Edit_Surf_RicL")
        self.label_56 = QtWidgets.QLabel(self.groupBox_6)
        self.label_56.setGeometry(QtCore.QRect(10, 50, 51, 16))
        self.label_56.setObjectName("label_56")
        self.Edit_Surf_RicR = QtWidgets.QLineEdit(self.groupBox_6)
        self.Edit_Surf_RicR.setGeometry(QtCore.QRect(200, 50, 90, 20))
        self.Edit_Surf_RicR.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_Surf_RicR.setObjectName("Edit_Surf_RicR")
        self.label_57 = QtWidgets.QLabel(self.groupBox_6)
        self.label_57.setGeometry(QtCore.QRect(160, 50, 51, 16))
        self.label_57.setObjectName("label_57")
        self.groupBox_7 = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox_7.setGeometry(QtCore.QRect(590, 110, 551, 71))
        self.groupBox_7.setObjectName("groupBox_7")
        self.Edit_stiffness_KV = QtWidgets.QLineEdit(self.groupBox_7)
        self.Edit_stiffness_KV.setGeometry(QtCore.QRect(50, 47, 71, 20))
        self.Edit_stiffness_KV.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_stiffness_KV.setObjectName("Edit_stiffness_KV")
        self.label_58 = QtWidgets.QLabel(self.groupBox_7)
        self.label_58.setGeometry(QtCore.QRect(10, 47, 31, 16))
        self.label_58.setObjectName("label_58")
        self.Edit_stiffness_KL = QtWidgets.QLineEdit(self.groupBox_7)
        self.Edit_stiffness_KL.setGeometry(QtCore.QRect(200, 47, 71, 20))
        self.Edit_stiffness_KL.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_stiffness_KL.setObjectName("Edit_stiffness_KL")
        self.label_59 = QtWidgets.QLabel(self.groupBox_7)
        self.label_59.setGeometry(QtCore.QRect(160, 47, 21, 16))
        self.label_59.setObjectName("label_59")
        self.label_60 = QtWidgets.QLabel(self.groupBox_7)
        self.label_60.setGeometry(QtCore.QRect(310, 47, 31, 16))
        self.label_60.setObjectName("label_60")
        self.Edit_stiffness_KT = QtWidgets.QLineEdit(self.groupBox_7)
        self.Edit_stiffness_KT.setGeometry(QtCore.QRect(350, 47, 71, 20))
        self.Edit_stiffness_KT.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_stiffness_KT.setObjectName("Edit_stiffness_KT")
        self.radio_PCR = QtWidgets.QRadioButton(self.groupBox_7)
        self.radio_PCR.setGeometry(QtCore.QRect(10, 20, 90, 16))
        
        self.radio_PCR.setObjectName("radio_PCR")
        self.radio_LTR = QtWidgets.QRadioButton(self.groupBox_7)
        self.radio_LTR.setGeometry(QtCore.QRect(114, 20, 90, 16))
        self.radio_LTR.setObjectName("radio_LTR")
        self.radio_TBR = QtWidgets.QRadioButton(self.groupBox_7)
        self.radio_TBR.setGeometry(QtCore.QRect(214, 20, 90, 16))
        self.radio_TBR.setObjectName("radio_TBR")
        self.label_61 = QtWidgets.QLabel(self.groupBox_5)
        self.label_61.setGeometry(QtCore.QRect(10, 110, 121, 16))
        self.label_61.setObjectName("label_61")
        self.Edit_RimMass = QtWidgets.QLineEdit(self.groupBox_5)
        self.Edit_RimMass.setGeometry(QtCore.QRect(170, 110, 71, 20))
        self.Edit_RimMass.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_RimMass.setObjectName("Edit_RimMass")
        self.Edit_SubCycling = QtWidgets.QLineEdit(self.groupBox_5)
        self.Edit_SubCycling.setGeometry(QtCore.QRect(430, 110, 71, 20))
        self.Edit_SubCycling.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_SubCycling.setObjectName("Edit_SubCycling")
        self.label_62 = QtWidgets.QLabel(self.groupBox_5)
        self.label_62.setGeometry(QtCore.QRect(270, 110, 141, 16))
        self.label_62.setObjectName("label_62")
        self.Edit_FPC_depth = QtWidgets.QLineEdit(self.groupBox_5)
        self.Edit_FPC_depth.setGeometry(QtCore.QRect(170, 140, 71, 20))
        self.Edit_FPC_depth.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_FPC_depth.setObjectName("Edit_FPC_depth")
        self.label_63 = QtWidgets.QLabel(self.groupBox_5)
        self.label_63.setGeometry(QtCore.QRect(10, 140, 141, 16))
        self.label_63.setObjectName("label_63")
        self.label_64 = QtWidgets.QLabel(self.groupBox_5)
        self.label_64.setGeometry(QtCore.QRect(250, 140, 31, 16))
        self.label_64.setObjectName("label_64")
        self.groupBox_9 = QtWidgets.QGroupBox(self.groupBox_5)
        self.groupBox_9.setGeometry(QtCore.QRect(10, 180, 1131, 471))
        self.groupBox_9.setObjectName("groupBox_9")
        self.Edit_materialPosition = QtWidgets.QLineEdit(self.groupBox_9)
        self.Edit_materialPosition.setGeometry(QtCore.QRect(63, 22, 261, 20))
        self.Edit_materialPosition.setObjectName("Edit_materialPosition")
        # self.Edit_materialPosition.setDisabled(True)

        self.label_74 = QtWidgets.QLabel(self.groupBox_9)
        self.label_74.setGeometry(QtCore.QRect(13, 22, 51, 16))
        self.label_74.setObjectName("label_74")
        self.Edit_cordFile = QtWidgets.QLineEdit(self.groupBox_9)
        self.Edit_cordFile.setGeometry(QtCore.QRect(370, 23, 341, 20))
        self.Edit_cordFile.setObjectName("Edit_cordFile")
        self.label_75 = QtWidgets.QLabel(self.groupBox_9)
        self.label_75.setGeometry(QtCore.QRect(330, 23, 61, 16))
        self.label_75.setObjectName("label_75")
        # self.Edit_cordFile.setDisabled(True)


        self.Edit_beltLift = QtWidgets.QLineEdit(self.groupBox_9)
        self.Edit_beltLift.setGeometry(QtCore.QRect(765, 23, 51, 20))
        self.Edit_beltLift.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_beltLift.setObjectName("Edit_beltLift")
        self.label_77 = QtWidgets.QLabel(self.groupBox_9)
        self.label_77.setGeometry(QtCore.QRect(722, 23, 41, 16))
        self.label_77.setObjectName("label_77")
        self.Edit_CcDrumDia = QtWidgets.QLineEdit(self.groupBox_9)
        self.Edit_CcDrumDia.setGeometry(QtCore.QRect(900, 21, 51, 20))
        self.Edit_CcDrumDia.setText("")
        self.Edit_CcDrumDia.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_CcDrumDia.setObjectName("Edit_CcDrumDia")
        self.label_78 = QtWidgets.QLabel(self.groupBox_9)
        self.label_78.setGeometry(QtCore.QRect(819, 23, 81, 16))
        self.label_78.setObjectName("label_78")
        
        self.Edit_CcGa = QtWidgets.QLineEdit(self.groupBox_9)
        self.Edit_CcGa.setGeometry(QtCore.QRect(1009, 20, 41, 20))
        self.Edit_CcGa.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_CcGa.setObjectName("Edit_CcGa")
        self.label_ccGa = QtWidgets.QLabel(self.groupBox_9)
        self.label_ccGa.setGeometry(QtCore.QRect(963, 20, 41, 16))
        self.label_ccGa.setObjectName("label_ccGa")

        self.push_caculation = QtWidgets.QPushButton(self.groupBox_9)
        self.push_caculation.setGeometry(QtCore.QRect(1056, 14, 71, 31))
        self.push_caculation.setObjectName("push_caculation")
        self.push_caculation.clicked.connect(self.reCalculationDrumRadius)


        
        self.tableWidget = QtWidgets.QTableWidget(self.groupBox_9)
        self.tableWidget.setGeometry(QtCore.QRect(10, 50, 1111, 301))
        self.tableWidget.setObjectName("tableWidget_2")
        self.tableWidget.setColumnCount(12)
        self.tableWidget.setRowCount(30)
        self.tableWidget.setHorizontalHeaderLabels(["Elset", "CODE", "Init. Temp", "Scale", \
            "Type", "Angle", "Radius", "Steel", "Density(ρ)", "Scale/Topping ρ", "volume", "Weight"])
        k = 0 
        self.tableWidget.setColumnWidth(k, 60);   k += 1
        self.tableWidget.setColumnWidth(k, 150);   k += 1
        self.tableWidget.setColumnWidth(k, 80);   k += 1
        self.tableWidget.setColumnWidth(k, 40);   k += 1
        self.tableWidget.setColumnWidth(k, 60);   k += 1
        self.tableWidget.setColumnWidth(k, 60);   k += 1
        self.tableWidget.setColumnWidth(k, 80);   k += 1
        self.tableWidget.setColumnWidth(k, 60);   k += 1
        self.tableWidget.setColumnWidth(k, 80);   k += 1
        self.tableWidget.setColumnWidth(k, 120);   k += 1
        self.tableWidget.setColumnWidth(k, 80);   k += 1
        self.tableWidget.setColumnWidth(k, 80);   k += 1

        height = 9
        for i in range(30): 
            self.tableWidget.setRowHeight(i, height) 

        nSD = 0 
        for i, sd in enumerate(self.solid):
            self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem( str(sd[0])) )

            no_mat = 0 
            for mat in self.NoMaterial: 
                # print (mat, sd[1])
                if mat.strip() == sd[1].strip(): 
                    no_mat = 1 
                    break 
            if no_mat ==0: 
                self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem( str(sd[1])) )
            else: 
                # print (mat, sd[1])
                self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem( str(sd[1])+ "- Not available") )

            self.tableWidget.setItem(i, 2,  QtWidgets.QTableWidgetItem( str(sd[2])) )
            self.tableWidget.setItem(i, 3,  QtWidgets.QTableWidgetItem( str(sd[3])) )
            if len(sd)> 4: 
                self.tableWidget.setItem(i, 8,  QtWidgets.QTableWidgetItem( str(sd[4])) )
                self.tableWidget.setItem(i, 9,  QtWidgets.QTableWidgetItem( str(sd[5])) )
                self.tableWidget.setItem(i, 10,  QtWidgets.QTableWidgetItem( str(sd[6])) )
                self.tableWidget.setItem(i, 11,  QtWidgets.QTableWidgetItem( str(sd[7])) )
            nSD = i 
        
        nSD += 1
        self.rebarStartRow=nSD 
        for i, sd in enumerate(self.rebar):
            self.tableWidget.setItem(i + nSD , 0,  QtWidgets.QTableWidgetItem( str(sd[0])) )
            no_mat = 0 
            for mat in self.NoMaterial: 
                # print (mat, sd[2])
                if mat.strip() in sd[2]: 
                    no_mat = 1 
                    break 
            # print ("Rebar", sd, ": ", no_mat )
            if no_mat ==0: 
                self.tableWidget.setItem(i + nSD, 1, QtWidgets.QTableWidgetItem( str(sd[2])) )
            else: 
                # print (mat, sd[2])
                self.tableWidget.setItem(i + nSD, 1, QtWidgets.QTableWidgetItem( str(sd[2]) + "- Not available" ) )

            self.tableWidget.setItem(i + nSD, 2, QtWidgets.QTableWidgetItem( str(sd[3])) )
            if "OJFC" in sd[0] or 'OJEC' in sd[0]: 
                self.tableWidget.setItem(i + nSD, 3,  QtWidgets.QTableWidgetItem( '0.6' ) )
            else: 
                self.tableWidget.setItem(i + nSD, 3,  QtWidgets.QTableWidgetItem( str(sd[4])) )

            self.tableWidget.setItem(i+ nSD, 4,  QtWidgets.QTableWidgetItem( str(sd[1])) )
            self.tableWidget.setItem(i+ nSD, 5,  QtWidgets.QTableWidgetItem( str(sd[6])) )
            if not self.radio_TBR.isChecked() and ("BT" in sd[0] or  "SPC" in sd[0] or "JEC" in sd[0]  or "JFC" in sd[0]):
                found = 0
                for br in self.RolledLayerGauge: 
                    if br[0] == sd[0]: 
                        rad = round(float(sd[7]) - br[1] / 2.0 , 4) 
                        found =1 
                        # print (sd[0], "belt radius = modifined by", br[1] / 2.0)
                        break 
                if found ==1: self.tableWidget.setItem(i+ nSD, 6,  QtWidgets.QTableWidgetItem( str(rad)) )
                else: self.tableWidget.setItem(i+ nSD, 6,  QtWidgets.QTableWidgetItem( str(sd[7])) )
            else:
                self.tableWidget.setItem(i+ nSD, 6,  QtWidgets.QTableWidgetItem( str(sd[7])) )
                
            self.tableWidget.setItem(i+ nSD, 7,  QtWidgets.QTableWidgetItem( str(sd[5])) )
            
            if len(sd)> 8:
                self.tableWidget.setItem(i+ nSD, 8,  QtWidgets.QTableWidgetItem( str(sd[8])) )
                self.tableWidget.setItem(i+ nSD, 9,  QtWidgets.QTableWidgetItem( str(sd[9])) )
                self.tableWidget.setItem(i+ nSD, 10,  QtWidgets.QTableWidgetItem( str(sd[11])) )
                self.tableWidget.setItem(i+ nSD, 11,  QtWidgets.QTableWidgetItem( str(sd[10])) )
            
        self.label_76 = QtWidgets.QLabel(self.groupBox_5)
        self.label_76.setGeometry(QtCore.QRect(10, 80, 161, 16))
        self.label_76.setObjectName("label_76")
        self.Edit_beltThickSubtraction = QtWidgets.QLineEdit(self.groupBox_5)
        self.Edit_beltThickSubtraction.setGeometry(QtCore.QRect(170, 80, 71, 20))
        self.Edit_beltThickSubtraction.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_beltThickSubtraction.setObjectName("Edit_beltThickSubtraction")
        self.Edit_BetweenBelts = QtWidgets.QLineEdit(self.groupBox_5)
        self.Edit_BetweenBelts.setGeometry(QtCore.QRect(250, 80, 171, 20))
        self.Edit_BetweenBelts.setAlignment(QtCore.Qt.AlignCenter)
        self.Edit_BetweenBelts.setObjectName("Edit_BetweenBelts")

        self.push_showCompd = QtWidgets.QPushButton(self.groupBox_5)
        self.push_showCompd.setGeometry(QtCore.QRect(300, 140, 131, 31))
        self.push_showCompd.setObjectName("push_showCompd")
        self.push_showCord = QtWidgets.QPushButton(self.groupBox_5)
        self.push_showCord.setGeometry(QtCore.QRect(440, 140, 131, 31))
        self.push_showCord.setObjectName("push_showCord")

        self.push_showCompd.clicked.connect(self.openMaterialFile)
        self.push_showCord.clicked.connect(self.openCordFile)


        self.Edit_SmartSave = QtWidgets.QLineEdit(Dialog)
        self.Edit_SmartSave.setMinimumSize(QtCore.QSize(0, 30))
        self.Edit_SmartSave.setObjectName("Edit_SmartSave")
        self.gridLayout_2.addWidget(self.Edit_SmartSave, 0, 1, 1, 2)
        self.pushSave = QtWidgets.QPushButton(Dialog)
        self.pushSave.setMinimumSize(QtCore.QSize(200, 30))
        self.pushSave.setMaximumSize(QtCore.QSize(200, 16777215))
        self.pushSave.setObjectName("pushSave")
        self.gridLayout_2.addWidget(self.pushSave, 0, 0, 1, 1)
        self.pushDefault = QtWidgets.QPushButton(Dialog)
        self.pushDefault.setMinimumSize(QtCore.QSize(100, 30))
        self.pushDefault.setMaximumSize(QtCore.QSize(100, 16777215))
        self.pushDefault.setObjectName("pushDefault")
        self.gridLayout_2.addWidget(self.pushDefault, 0, 3, 1, 1)
        self.push_openSample = QtWidgets.QPushButton(Dialog)
        self.push_openSample.setMinimumSize(QtCore.QSize(100, 30))
        self.push_openSample.setMaximumSize(QtCore.QSize(100, 16777215))
        self.push_openSample.setObjectName("push_openSample")
        self.push_openSample.clicked.connect(self.openSample)
        self.gridLayout_2.addWidget(self.push_openSample, 0, 4, 1, 1)

        self.currentSMARTInput = "currentSmartInput.tmp"
        if os.path.isfile(self.currentSMARTInput): 
            self.readCurrentInput(self.currentSMARTInput)    
            self.retranslateUi(Dialog)
        else:
            if os.path.isfile(self.saveDefaultFile): 
                self.readDefault(self.saveDefaultFile)
                self.retranslateUi(Dialog)
            else: 
                self.retranslateUi(Dialog)
                self.saveDefault(fname=self.saveDefaultFile)

        self.kerfContact = self.initKerfContact 
        
        self.pushSave.clicked.connect(self.generateSMART_Inp)
        self.pushDefault.clicked.connect(self.saveDefault)
        self.radio_PCR.clicked.connect(self.tireGroupChange)
        self.radio_LTR.clicked.connect(self.tireGroupChange)
        self.radio_TBR.clicked.connect(self.tireGroupChange)

        self.check_GroupTBR.toggled.connect(self.RimInfoChanged)
        self.check_Tube.toggled.connect(self.RimInfoChanged)

        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.Edit_Inflation_Time1.setText(str(self.PCITime1))
        self.Edit_Inflation_Time2.setText(str(self.PCITime2))
        self.Edit_totalTime.setText(str(self.totalTime))
        self.Edit_stepTime.setText(str(self.delTime))
        self.Edit_averageTime.setText(str(self.avgTime))

        self.Edit_massScale.setText(str(self.massScale))
        self.Edit_DT_ratio.setText(str(self.DtRatio))

        if self.kerfContact ==1: self.check_kerf.setChecked(True)
        if self.cavityContact ==1: self.check_Cavity.setChecked(True)
        if self.TemperatureAnalysis ==1: self.groupBox_4.setChecked(True)
        
        self.Edit_TempStartTime.setText(str(self.TempStart))
        self.Edit_Temp_Air.setText(str(self.TempAir))
        self.Edit_Temp_Road.setText(str(self.TempRoad))
        if self.PressVariance ==1: self.check_pressVariance.setChecked(True)

        self.Edit_PressVarianceStartTime.setText(str(self.PressVarianceStart))
        self.Edit_rimCavityWidth.setText(str(self.HubWidth))
        self.Edit_rimCavityHeight.setText(str(self.HubHeight))
        if self.TempResult ==0: self.radio_Temp.setChecked(True)
        if self.TempResult ==1: self._tempOut.setChecked(True)
        if self.TempResult ==2: self.radio_TempReading.setChecked(True)
        self.Edit_tempFile.setText(str(self.TempResultFile))
        
        self.Edit_beltThickSubtraction.setText(str(self.btSubtraction))
        self.Edit_BetweenBelts.setText(str(self.Between))
        self.Edit_RimMass.setText(str(self.rimMass))
        self.Edit_SubCycling.setText(str(self.ElsetSubcycling))
        self.Edit_FPC_depth.setText(str(self.FPC))

        self.readMaterial(self.materialFile) 

        if self.LowCure ==1:           self.check_LowCure.setChecked(True)
        else:                          self.check_LowCure.setChecked(False)
        
        if self.PCI ==1:           self.groupBox_Check.setChecked(True)
        else:                      self.groupBox_Check.setChecked(False)

        self.Edit_BSD.setText(str(self.BSD))
        self.Edit_coreWidth.setText(str(self.BDWidth))
        
        
        self.Edit_PCI_RW_mm.setText(str(self.PCIRIMW))
        self.Edit_PCI_RW_inch.setText(str(round(self.PCIRIMW/25.4, 1)))
        self.Edit_axiFile.setText(self.axi)
        self.Edit_trdFile.setText(self.trd)
        
        self.PCIPress = pciPress 
        self.Edit_PCI_press_kPa.setText( str(round(self.PCIPress*98.07, 2)))
        self.Edit_PCI_press_psi.setText( str(round(self.PCIPress*14.22, 2)))
        self.Edit_PCI_press_kgf.setText( str(self.PCIPress))
        self.Edit_SmartSave.setText(self.saveFile)
        self.Edit_beltThickSubtraction.setText(str(self.btSubtraction))
        self.Edit_BetweenBelts.setText(self.Between)
        self.Edit_RimMass.setText(str(self.rimMass))
        self.Edit_SubCycling.setText(self.ElsetSubcycling)
        self.Edit_FPC_depth.setText(str(self.FPC))

        self.Edit_beltLift.setText(str(self.beltLift))
        self.Edit_CcDrumDia.setText(str(self.carcassDrumDia))
        self.Edit_CcGa.setText(str(self.carcassGa))
        self.Edit_camber.setText(str(self.Camber))


        if self.TemperatureAnalysis ==1: 
            self.groupBox_4.setChecked(True)
        else:
            self.groupBox_4.setChecked(False)

        # self.Edit_pressKgf.returnPressed.connect(self.pressureKgf)
        self.Edit_pressKgf.editingFinished.connect(self.pressureKgf)
        self.Edit_presskPa.editingFinished.connect(self.pressureKpa)
        self.Edit_pressPSI.editingFinished.connect(self.pressurePsi)

        self.Edit_PCI_press_kgf.editingFinished.connect(self.pressurePCIKgf)
        self.Edit_PCI_press_kPa.editingFinished.connect(self.pressurePCIKpa)
        self.Edit_PCI_press_psi.editingFinished.connect(self.pressurePCIPsi)

        self.Edit_loadKgf.editingFinished.connect(self.loadKgf)
        self.Edit_loadLbs.editingFinished.connect(self.loadLbf)

        # self.Edit_RWInch.returnPressed.connect(self.testRWInch)
        self.Edit_RWInch.editingFinished.connect(self.testRWInch)
        self.Edit_RWmm.editingFinished.connect(self.testRWmm)
        
        # self.Edit_RDinch.returnPressed.connect(self.testRDInch)
        self.Edit_RDinch.editingFinished.connect(self.testRDInch)
        self.Edit_RDmm.editingFinished.connect(self.testRDmm)

        self.Edit_PCI_RW_mm.editingFinished.connect(self.PCIRWmm)
        self.Edit_PCI_RW_inch.editingFinished.connect(self.PCIRWInch)


        self.TempReadInOut() # read in or out the temperature result file 

        self.gridLayout_2.addWidget(self.groupBox_5, 2, 0, 1, 5)
        self.gridLayout_2.addWidget(self.groupBox_2, 1, 0, 1, 2)

        
        
        
    def readCurrentInput(self, fname): 
        self.readDefault(fname, mat=1)
        

    def tireGroupChange(self): 
        if self.radio_PCR.isChecked(): 
            self.Edit_stiffness_KV.setText("24.6")
            self.Edit_stiffness_KL.setText("20.03")
            self.Edit_stiffness_KT.setText("30.0")
            # self.check_GroupTBR.setChecked(False)
            self.Edit_RimGeo.setText("/home/fiper/ISLM_RIM/RIM_PCLT.GEOM")
            self.check_LowCure.setChecked(False)
            self.groupBox_Check.setChecked(True)
        if self.radio_LTR.isChecked(): 
            self.Edit_stiffness_KV.setText("24.6")
            self.Edit_stiffness_KL.setText("20.03")
            self.Edit_stiffness_KT.setText("30.0")
            # self.check_GroupTBR.setChecked(False)
            self.Edit_RimGeo.setText("/home/fiper/ISLM_RIM/RIM_PCLT.GEOM")
            self.check_LowCure.setChecked(False)
            self.groupBox_Check.setChecked(True)
        if self.radio_TBR.isChecked(): 
            self.Edit_stiffness_KV.setText("114.0")
            self.Edit_stiffness_KL.setText("38.0")
            self.Edit_stiffness_KT.setText("72.0")
            # self.check_GroupTBR.setChecked(True)
            if self.check_Tube.isChecked(): 
                self.Edit_RimGeo.setText("/home/fiper/ISLM_RIM/RIM_TBTUBE.GEOM")
            else:
                self.Edit_RimGeo.setText("/home/fiper/ISLM_RIM/RIM_TB_TUBELESS.GEOM")
            self.check_LowCure.setChecked(True)
            self.groupBox_Check.setChecked(False)

        self.reCalculationDrumRadius()


    def UpdateMaterialFromDB(self): 
        success = PTN.Update_ISLM_Material(wdir=self.Edit_materialPosition.text(), cordSaveFile=self.cordDB, fileListFile=self.solidListFile, \
            cordfile=self.localCordDBFile, cordDBFile=self.Edit_cordFile.text())
        
        if success ==1:     
            # print ("* ISLM Mateiral DB was updated.")
            self.tableWidget.setItem(0, 4, QtWidgets.QTableWidgetItem(""))
            self.tableWidget.setItem(0, 5, QtWidgets.QTableWidgetItem(""))
            self.tableWidget.setItem(0, 6, QtWidgets.QTableWidgetItem(""))
            self.tableWidget.setItem(0, 7, QtWidgets.QTableWidgetItem(""))
        else: 
            print ("## cannot access to server")
            self.tableWidget.setItem(0, 4, QtWidgets.QTableWidgetItem("Cannot"))
            self.tableWidget.setItem(0, 5, QtWidgets.QTableWidgetItem("access"))
            self.tableWidget.setItem(0, 6, QtWidgets.QTableWidgetItem("to"))
            self.tableWidget.setItem(0, 7, QtWidgets.QTableWidgetItem("server"))


    def reCalculationDrumRadius(self):

        self.UpdateMaterialFromDB()

        if os.path.isfile(self.currentSMARTInput):
            with open(self.currentSMARTInput) as MAT: 
                lines = MAT.readlines()

            inLine = 0 
            cordInfo =[]
            sdInfo=[]
            nSD=0
            for line in lines:
                if "**" in line: continue 
                if "*" in line: 
                    if "*Material properties" in line: inLine =1 
                    else: inLine = 0 
                else:
                    if inLine ==1: 
                        # print(line.strip())
                        words = line.split(",")
                        if words[0] =="": 
                            continue 
                        if '-' in words[4] or 'Cannot' in words[4] or words[4]==" ":
                            sdInfo.append([words[0].strip(), words[1].strip()])
                            nSD += 1
                            # print ("solid", nSD, line.strip())
                        else: 
                            try: 
                                cordInfo.append([words[0].strip(), words[1].strip(), float(words[8].strip()), float(words[9].strip()), float(words[10].strip()), float(words[11].strip())])
                                # print ("cords1")
                            except:
                                cordInfo.append([words[0].strip(), words[1].strip(), 0.0, 0.0, 0.0, 0.0])
                                # print ("cords0")
        else:
            with open(self.materialFile) as MAT: 
                lines = MAT.readlines()
                
            cords = 0 
            cordInfo =[]
            sdInfo=[]
            for line in lines:
                if "**" in line: continue 
                if "*" in line: 
                    if "*REBAR_SECTION" in line: cords =1 
                    elif "*SOLID_SECTION,"  in line: cords =2 
                    else: cords = 0 
                else:
                    if cords ==1: 
                        words = line.split(",")
                        try: 
                            cordInfo.append([words[0].strip(), words[2].strip(), float(words[8].strip()), float(words[9].strip()), float(words[10].strip()), float(words[11].strip())])
                        # try: 
                        #     cordInfo.append([words[0].strip(), words[2].strip(), float(words[8].strip()), float(words[9].strip()), float(words[10].strip()), float(words[11].strip())])
                        except:
                            cordInfo.append([words[0].strip(), words[2].strip(), 0.0, 0.0, 0.0, 0.0])
                    if cords ==2: 
                        words = line.split(",")
                        sdInfo.append([words[0].strip(), words[1].strip()])

            nSD = self.rebarStartRow

        self.saveDefault(fname=self.currentSMARTInput, mat=1)
        try:  
            self.beltLift = float(self.Edit_beltLift.text())
            self.carcassDrumDia = float(self.Edit_CcDrumDia.text())
            self.carcassGa = float(self.Edit_CcGa.text())
        ## self.underCcGa, self.tireCenterMinR
        except:
            return 

        for m in range(nSD): 
            eName = self.tableWidget.item(m, 0).text().strip() 
            cName = self.tableWidget.item(m, 1).text().strip() 
            
            if "- Not available" in cName: 
                cName = cName.split("-")[0]
            fd = 0
            for pd in sdInfo:
                if pd[0] == eName: 
                    if pd[1] == cName: 
                        fd =1 
                    break 
            if fd ==0: 
                for k, pd in enumerate(sdInfo):
                    if pd[0] == eName: 
                        pd[1] = cName
                        print (" > The code of Elset %s was changed to %s"%(pd[0], sdInfo[k][1]))
                        break 
                self.tableWidget.setItem(m, 8, QtWidgets.QTableWidgetItem( str(0.00)) )

                try: sd[5]=self.tableWidget.item(m, 9).text().strip()
                except: sd[5]=1.00
                self.tableWidget.setItem(m, 9, QtWidgets.QTableWidgetItem( str(sd[5])) )

                try: sd[6]=self.tableWidget.item(m,10).text().strip()
                except: sd[6]=0.00
                try: sd[7]=self.tableWidget.item(m,11).text().strip()
                except: sd[7]=0.00
                self.tableWidget.setItem(m, 10, QtWidgets.QTableWidgetItem( str(sd[6])) )
                self.tableWidget.setItem(m, 11, QtWidgets.QTableWidgetItem( str(sd[7])) )

            else: 
                if len(self.solid[0]) > 4: 
                    for sd in self.solid: 
                        if sd[0] == eName: 
                            
                            try: sd[4]=self.tableWidget.item(m,8).text().strip()
                            except: sd[4]=0.0
                            try: sd[5]=self.tableWidget.item(m,9).text().strip()
                            except: sd[5]=1.0 
                            try: sd[6]=self.tableWidget.item(m,10).text().strip()
                            except: sd[6]=0.0
                            try: sd[7]=self.tableWidget.item(m,11).text().strip()
                            except: sd[7]=0.0
                            # print ("M=", m, sd[0], sd[7], round(float(sd[6])*float(sd[4])*float(sd[5]), 3))
                            if float(sd[4]) > 0: sd[7] = round(float(sd[6])*float(sd[4])*float(sd[5]), 3)
                            self.tableWidget.setItem(m, 8, QtWidgets.QTableWidgetItem( str(sd[4])) )
                            self.tableWidget.setItem(m, 9, QtWidgets.QTableWidgetItem( str(sd[5])) )
                            self.tableWidget.setItem(m, 10, QtWidgets.QTableWidgetItem( str(sd[6])) )
                            self.tableWidget.setItem(m, 11, QtWidgets.QTableWidgetItem( str(sd[7])) )
                            break 

        for i, sd in enumerate(self.rebar):
            self.tableWidget.setItem(i + nSD , 0,  QtWidgets.QTableWidgetItem( str(sd[0])) )
            sd[2] = self.tableWidget.item(i+nSD,1).text().strip()

            if "- Not available" in sd[2]: 
                sd[2] = sd[2].split("-")[0]
            if sd[2]=='': print("sd", sd)

            no_mat = 0 
            for mat in self.NoMaterial: 
                if mat.strip() in sd[2]: 
                    no_mat = 1 
                    break 
            if no_mat ==0: 
                self.tableWidget.setItem(i + nSD, 1, QtWidgets.QTableWidgetItem( str(sd[2])) )
            else: 
                self.tableWidget.setItem(i + nSD, 1, QtWidgets.QTableWidgetItem( str(sd[2]) + "- Not available" ) )

            sd[3] = self.tableWidget.item(i+nSD,2).text().strip()
            self.tableWidget.setItem(i + nSD, 2, QtWidgets.QTableWidgetItem( str(sd[3])) )
            sd[4] = self.tableWidget.item(i+nSD,3).text().strip()
            self.tableWidget.setItem(i + nSD, 3,  QtWidgets.QTableWidgetItem( str(sd[4])) )

            try: 
                sd[1] = self.tableWidget.item(i+nSD,4).text().strip()
                sd[6] = self.tableWidget.item(i+nSD,5).text().strip()
            except: 
                print (i+ nSD, "-", sd[0], sd[2])
            self.tableWidget.setItem(i+ nSD, 4,  QtWidgets.QTableWidgetItem( str(sd[1])) )
            
            self.tableWidget.setItem(i+ nSD, 5,  QtWidgets.QTableWidgetItem( str(sd[6])) )

            if "BT" in sd[0] or  "SPC" in sd[0] or "JEC" in sd[0]  or "JFC" in sd[0]  : 

                for br in self.beltRadius: 
                    if br[0] == sd[0]: 
                        rad = br[1]/self.beltLift 
                        break 
                if not self.radio_TBR.isChecked(): 
                    for br in self.RolledLayerGauge: 
                        if br[0] == sd[0]: 
                            rad -= br[1] / 2.0 
                            # print (sd[0], "belt radius = modifined by", br[1] / 2.0)
                            break 
                # else: 
                #     print (sd[0], "belt radius ", rad)
                sd[7] = round(rad, 4)
            if "C0" in sd[0] or "CC" in sd[0]: 
                layer = float(sd[0][-1])
                ccr = self.carcassDrumDia/2.0
                rad = ccr + self.underCcGa * (self.tireCenterMinR/ccr) + self.carcassGa*(layer - 1.0)
                # print (self.carcassDrumDia, "*inner Ga=", self.underCcGa, layer, "cc ga", self.carcassGa, "lift", self.tireCenterMinR/self.carcassDrumDia)
                sd[7] = round(rad, 4)
            self.tableWidget.setItem(i+ nSD, 6,  QtWidgets.QTableWidgetItem( str(sd[7])) )
            if "ES" in sd[2]: sd[5]=1
            else: sd[5]=0
            self.tableWidget.setItem(i+ nSD, 7,  QtWidgets.QTableWidgetItem( str(sd[5])) )
            
            if len(sd)> 8:
                changed = 0 
                for info in cordInfo: 
                    if info[0] == str(sd[0]) : 
                        if info[1] != str(sd[2]): 
                            changed = 1
                            break 
                if changed ==0: 
                    try: sd[8]=self.tableWidget.item(i+nSD,8).text().strip()
                    except: sd[8]=0.0
                    try: sd[9]=self.tableWidget.item(i+nSD,9).text().strip()
                    except: sd[9]=0.0
                    try: sd[10]=self.tableWidget.item(i+nSD,11).text().strip()
                    except: sd[10]=0.0
                    try: sd[11]=self.tableWidget.item(i+nSD,10).text().strip()
                    except: sd[11]=0.0
                    
                    self.tableWidget.setItem(i+ nSD, 8,  QtWidgets.QTableWidgetItem( str(sd[8])) )
                    self.tableWidget.setItem(i+ nSD, 9,  QtWidgets.QTableWidgetItem( str(sd[9])) )
                    self.tableWidget.setItem(i+ nSD, 10,  QtWidgets.QTableWidgetItem( str(sd[11])) )
                    self.tableWidget.setItem(i+ nSD, 11,  QtWidgets.QTableWidgetItem( str(sd[10])) )
                else: 
                    for info in cordInfo: 
                        if info[0] == str(sd[0]) : 
                            if info[1] != str(sd[2]):
                                print (" > %s(%s) was changed to %s"%(info[1],info[0], sd[2]))
                                info[1] = sd[2]
                                break 
                    self.tableWidget.setItem(i+ nSD, 8,  QtWidgets.QTableWidgetItem( str(0.000e+00)) )
                    
                    try: sd[9]=self.tableWidget.item(i+nSD,9).text().strip()
                    except: sd[9] = 0.00
                    self.tableWidget.setItem(i+ nSD, 9,  QtWidgets.QTableWidgetItem( str(sd[9])) )
                    try: sd[10]=self.tableWidget.item(i+nSD,11).text().strip()
                    except: sd[10] = 0.00
                    try: sd[11]=self.tableWidget.item(i+nSD,10).text().strip()
                    except: sd[11] = 0.00
                    self.tableWidget.setItem(i+ nSD, 10,  QtWidgets.QTableWidgetItem( str(sd[11])) )
                    self.tableWidget.setItem(i+ nSD, 11,  QtWidgets.QTableWidgetItem( str(sd[10])) )
        
        self.materialDBCheck()

        
    def materialDBCheck(self): 
        ## (wdir='', cordSaveFile='', fileListFile='', host='', user='', pw='', cordname=0, cordfile=''):

        try: 
            with open(self.cordDB) as matf: 
                lines = matf.readlines()
        except:
            fp=open(self.cordDB, 'r', encoding='UTF8')
            lines = fp.readlines()
            fp.close()


        cordList=[]
        enter = 0 
        for i, line in enumerate(lines):
            if "*" in line: 
                if "OLD_SPEC_CORD_NAME" in line: 
                    enter = 1
                else: 
                    enter = 0 
            else:
                if enter ==1: 
                    words = line.split(",")
                    cordList.append([words[0].strip(), words[2].strip()])

        PTN.WriteCordList(self.cordDB)

        solidList = []
        with open(self.solidListFile) as SL: 
            lines = SL.readlines()
        for line in lines:
            solidList.append(line.strip())

        
        # self.tableWidget.setItem(i + nSD , 0,  QtWidgets.QTableWidgetItem( str(sd[0])) )
        #  self.tableWidget.item(i,0).text().strip()
        i = 0 
        try: 
            name = self.tableWidget.item(0, 0).text().strip()
        except:
            name = None 

        currentSolidList = []
        toppingList=[]
        while name: 
            code = self.tableWidget.item(i, 1).text().strip()
            if code !="" and not "..." in code: 
                if "- Not available" in code: 
                    code = code.split("-")[0].strip()
                found = 0 
                if "ES" in code.upper() or "ET" in code.upper() or "EL" in code.upper(): 
                    for cl in cordList: 
                        if cl[0] == code: 
                            found = 1 
                            currentSolidList.append(cl[1])  ## topping compound 
                            break 
                else:
                    for cl in solidList: 
                        if cl == code: 
                            found = 1 
                            currentSolidList.append(cl)
                            break 

                if found ==0 : 
                    self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(code +"- Not available"))
                else:
                    self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(code))

            i += 1
            try : 
                name = self.tableWidget.item(i, 0).text().strip()
            except: 
                break 


        # for solid in self.includingMaterial:
        compoundNeedToAdd=[]
        k = 0 
        while k < len(currentSolidList): 
            m = k + 1 
            while m < len(currentSolidList) : 
                if currentSolidList[m] == currentSolidList[k]: 
                    del(currentSolidList[m])
                    continue 
                m +=1 
            k += 1
        
        self.includingMaterial=[]
        for sl in currentSolidList: 
            if "ABW" in sl: 
                self.includingMaterial.append(sl+".COR")
            else: 
                self.includingMaterial.append(sl+".PYN")
            

    def generateSMART_Inp(self): 
        self.saveDefault(fname=self.currentSMARTInput, mat=1)

        f = open(self.Edit_SmartSave.text(), 'w')
        f.write("*SIMULATION_TYPE  = 0       ( 0:TIRE, 1:LAT100, 2:NPT)\n")
        f.write("*SIMULATION_TIME  = %s, %s, %s { PHYSICAL TIME, MASS_SCALE(>=1, DEFAULT=1.02), DT_RATIO( IF =1.0=>VARIABLE, IF < 1.0 => FIXED FOR FFT ) }\n"%\
            (self.Edit_totalTime.text(),self.Edit_massScale.text(), self.Edit_DT_ratio.text()))
        f.write("*OUTPUT_CONTROL   = %s, %s    ( DEL_T FOR FRAME FRICVIEW OUTPUT, DEL_T FOR TIME HISTORY AVERAGING)\n"%(\
            self.Edit_stepTime.text(), self.Edit_averageTime.text()))
        f.write("*****************************************************************************************************************************\n")
        if self.check_freespin.isChecked():
            f.write("*INFLATION_TIME               = %s, %s,  %s (First Inflation End, Section Inflation End, Tire Velocity(kph) for Dyn. Profile)\n"%(\
                self.Edit_Inflation_Time1.text(), self.Edit_Inflation_Time2.text(), self.Edit_velocity.text()))
        else: 
            f.write("*INFLATION_TIME               = %s, %s,  0.0 (First Inflation End, Section Inflation End, Tire Velocity(kph) for Dyn. Profile)\n"%(\
                self.Edit_Inflation_Time1.text(), self.Edit_Inflation_Time2.text()))


        if self.check_kerf.isChecked(): kf =1 
        else: kf = 0 
        if self.check_Cavity.isChecked(): ic =1 
        else: ic = 0 
        f.write("*SELF_CONTACT_ACTIVATION      = %d, %d  (INNER CAVITY ON, OFF (1, 0:DEFAULT) , TREAD KERF ON, OFF (1, 0:DEFAULT))\n"%(ic, kf))
        if self.check_kerf.isChecked(): 
            try: 
                f.write("*GROOVE_DEPTH_FOR_KERF_CONTACT= %.5f\n"%(float(self.Edit_grooveDepth.text())/1000.0))
            except:
                return 
        if self.groupBox_4.isChecked(): 
            f.write("*TEMPERATURE_ANALYSIS         = 1, %s, %s, %s   (OFF:0, ON:1), IF ON, (T_COMPUTATION_START_TIME, AIR_T, ROAD_T)\n"%(\
                self.Edit_TempStartTime.text(), self.Edit_Temp_Air.text(), self.Edit_Temp_Road.text()))
        else:
            f.write("*TEMPERATURE_ANALYSIS         = 0, %s, %s, %s   (OFF:0, ON:1), IF ON, (T_COMPUTATION_START_TIME, AIR_T, ROAD_T)\n"%(\
                self.Edit_TempStartTime.text(), self.Edit_Temp_Air.text(), self.Edit_Temp_Road.text()))
        
        if self.radio_Temp.isChecked(): res = 0
        if self._tempOut.isChecked(): res = 1
        if self.radio_TempReading.isChecked(): res = 2
        if not self.groupBox_4.isChecked(): res = 0 
        f.write("*TEMPERATURE_OUT_IN           = %d, %s   !(0:NO_IN_OUT, 1:OUT_TEMP, 2:READ_TEMP), IF 2 READ IN FILENAME\n"%(res, self.TempResultFile))
        if self.check_pressVariance.isChecked(): ex =1 
        else: ex = 0 
        if not self.groupBox_4.isChecked(): ex = 0 
        f.write("*PRESSURE_VARIANCE            = %d, %s, %sD0, %sD0  (FOR TEMPERATURE OFF:0, ON:1), ( PRS_V VARIANCE START TIME-IF .LT. 3RD TIME SET TO 3RD TIME), RIM_ADDED_WIDTH, RIM_ADDED_DEPTH)\n"%(\
            ex, self.Edit_PressVarianceStartTime.text(), self.Edit_rimCavityWidth.text(), self.Edit_rimCavityHeight.text()))
        f.write("*****************************************************************************************************************************\n")
        f.write("*STIFFNESS        =  %s, %s, %s  (KV, KL, KT)\n"%(self.Edit_stiffness_KV.text(), self.Edit_stiffness_KL.text(), self.Edit_stiffness_KT.text()))
        if self.check_freespin.isChecked():
            f.write("*CONDITION_LOAD   =  %s, %s, 0.0, 0.0\n"%(self.Edit_pressKgf.text(), self.Edit_pressKgf.text()))
        else:
            f.write("*CONDITION_LOAD   =  %s, %s, %s, %s\n"%(self.Edit_pressKgf.text(), self.Edit_pressKgf.text(), self.Edit_loadKgf.text(),self.Edit_velocity.text()))
        
        f.write("*CAMBER_ANGLE     =  %s\n"%(self.Edit_camber.text()))

        try: 
            txt = self.Edit_SA_TimeStart.text()
            SA_Start = float(txt.strip())
            txt = self.Edit_SA_TimeDuration.text()
            SA_Duration = float(txt.strip())
        except: 
            SA_Start = 0.0
            SA_Duration = 0.0 

        if SA_Start ==0.0 and SA_Duration ==0.0: 
            if not self.check_lateralForce.isChecked(): 
                f.write("*LATERAL_CONTROL  =  1, %s\n"%(self.Edit_lateral.text()))
            else:
                try:
                    f.write("*LATERAL_CONTROL  =  0, %.1f\n"%(float(self.Edit_lateral.text())*9.81))
                except:
                    return
        else: 
            init = self.Edit_SA_Start.text()
            f.write("*LATERAL_CONTROL  =  3, %s, %.3f, %.3f, %s\n"%(init, SA_Start, SA_Duration, self.Edit_lateral.text() ))
        try : 
            txt = self.Edit_SR_TimeStart.text()
            SR_Start = float(txt.strip())
            txt = self.Edit_SR_TimeDuration.text()
            SR_Duration = float(txt.strip())
        except:
            SR_Start = 0.0 
            SR_Duration = 0.0 

        if SR_Start ==0.0 and SR_Duration ==0.0: 
            if not self.check_rotationForce.isChecked():
                try: 
                    if float(self.Edit_angularVelocity.text()) == 0 and  float(self.Edit_Rotation.text()) == 0: 
                        f.write("*ROTATION_CONTROL =  1, 0.0\n")
                    else: 
                        f.write("*ROTATION_CONTROL =  1, %s, %s\n"%(self.Edit_Rotation.text(), self.Edit_angularVelocity.text()))
                except:
                    return 
                        
            else:
                try: 
                    # f.write("*ROTATION_CONTROL =  1, %s, %s\n"%(self.Edit_Rotation.text(), self.Edit_angularVelocity.text()))
                    f.write("*ROTATION_CONTROL =  0, %.1f\n"%(float(self.Edit_Rotation.text())*9.81))
                except: return 
        else: 
            f.write("*ROTATION_CONTROL  =  3, %s, %.3f, %.3f\n"%(self.Edit_Rotation.text(), SR_Start, SR_Duration ))


        try: 
            f.write("*ROAD_GEOM        =  %.3f ( road=0, drum or disc.=diameter in meter: RR(1.707), CLEAT(2.50), Wear(3.048), LAT100(0.317) )\n"%(float(self.Edit_RoadDia.text())))
            f.write("*RIM_GEOM         =  %.1f, %.1f, %s\n"%(float(self.Edit_RDmm.text())/2.0, float(self.Edit_RWmm.text())/2.0, self.Edit_RimGeo.text()))
        except:
            return 
        f.write("*RIM_OR_HUB_REAL_MASS =%s   (RIM=1.0, LAT100=0.05, NPT=1.0)\n"%(self.Edit_RimMass.text()))
        f.write("*****************************************************************************************************************************\n")
        f.write("*SURFACES_FOR_CONTACT_AND_LOAD=%s, %s, %s, %s, %s        (TREAD, TBODY, PRESS, RICL, RICR FOR TIRE  )\n"%(\
            self.Edit_Surf_XTRD.text(),self.Edit_Surf_TireBody.text(), self.Edit_Surf_Press.text(), self.Edit_Surf_RicL.text(), self.Edit_Surf_RicR.text()))
        f.write("*****************************************************************************************************************************\n")
        # self.tableWidget.item(i, 1).text().strip()

        # with open(self.materialFile) as MAT: 
        #     lines = MAT.readlines()
        # cords = 0 
        # cordInfo =[]
        # for line in lines:
        #     if "**" in line: continue 
        #     if "*" in line: 
        #         if "*REBAR_SECTION" in line: cords =1 
        #         else: cords = 0 
        #     else:
        #         words = line.split(",")
        #         cordInfo.append([words[0].strip(), words[2].strip(), float(words[8].strip()), float(words[9].strip()), float(words[10].strip()), float(words[11].strip())])
        lstCode =[]
        with open("ISLM_CordList.dat") as DAT: 
            lines = DAT.readlines()
        
        for line in lines :
            words = line.split(",")
            lstCode.append([words[0].strip(), words[1].strip(), words[2].strip(), float(words[3][:-4].strip())])
            ## lstCode : code, physical name, topping compd, epi 
            # print(lstCode[-1])

        # lstRawCode =[]
        # with open("ISLM_CordDB.txt") as DAT: 
        #     lines = DAT.readlines()
        
        # for line in lines :
        #     words = line.split(",")
        #     lstRawCode.append([words[1].strip(), words[2].strip(), float(words[3].strip()), float(words[4].strip())])
        #     ## RawCode: Cord Name, Physical Name, Area, line Density 
        try: 
            name = self.tableWidget.item(0,0).text().strip()
        except:
            name = None 
        i = 0 
        solids =[]
        rebars=[]
        while name: 
            eset = self.tableWidget.item(i,0).text().strip()
            code = self.tableWidget.item(i,1).text().strip()
            temp = self.tableWidget.item(i,2).text().strip()
            sscale = self.tableWidget.item(i,3).text().strip()
            
            try: 
                mtype = self.tableWidget.item(i,4).text().strip()
                angle = self.tableWidget.item(i,5).text().strip()
                radius = self.tableWidget.item(i,6).text().strip()
                steel = self.tableWidget.item(i,7).text().strip()
                angle = float(angle)
            except: 
                mtype = ''
                angle = ''
                radius = ''
                steel = ''

            try:
                density = self.tableWidget.item(i,8).text().strip()
                scale_toppingDensity = self.tableWidget.item(i,9).text().strip()
                volume = self.tableWidget.item(i,10).text().strip()
                weight = self.tableWidget.item(i,11).text().strip()
            except:
                density = ''
                scale_toppingDensity = ''
                volume =''
                weight = ''


            if mtype =="": 
                if "-" in code and "Not available" in code: 
                    code = code.split("-")[0].strip()
                solids.append([eset, code, temp, sscale, density,scale_toppingDensity, volume, weight])
            else:
                if "-" in code and "Not available" in code: 
                    code = code.split("-")[0].strip()

                rebars.append([eset, mtype, code, temp, sscale, steel, angle, radius, density, scale_toppingDensity, volume, weight])

            i += 1
            try: 
                name = self.tableWidget.item(i,0).text().strip()
            except:
                name = None 

        
        initialCompd =[]
        for solid in self.includingMaterial:
            initialCompd.append(solid)

        # lineSolid=[]

        f.write("*SOLID_SECTION, (SOL, MAT)\n")
        # line= "*SOLID_SECTION, (SOL, MAT)\n"; lineSolid.append(line)
        for solid in solids:
            fd = 0 
            for sd in initialCompd: 
                if sd==solid[1]+".PYN":
                    fd =1 
                    break 
                if sd==solid[1]+".COR":
                    fd =1 
                    break
            if fd ==0  :
                if not "ABW" in solid[1]:
                    initialCompd.append(solid[1]+".PYN")
                else: 
                    for m, sd in enumerate(initialCompd): 
                        if ".COR" in sd: 
                            del(initialCompd[m])
                            break 
                    initialCompd.append(solid[1]+".COR")

            if solid[4] =="" : 
                f.write("%4s, %9s, %8s, %6s\n"%(solid[0], solid[1], solid[2], solid[3]))
                # line = "%4s, %9s, %8s, %6s\n"%(solid[0], solid[1], solid[2], solid[3]); lineSolid.append(line)
            else:
                if float(solid[4]) > 0 and float(solid[7]) > 0: 
                    f.write("%4s, %9s, %8s, %6s, %10s, %10s, %10s, %10s\n"%(solid[0], solid[1], solid[2], solid[3], solid[4], solid[5], solid[6], solid[7]))
                    # line= "%4s, %9s, %8s, %6s, %10s, %10s, %10s, %10s\n"%(solid[0], solid[1], solid[2], solid[3], solid[4], solid[5], solid[6], solid[7]); lineSolid.append(line)
                else:
                    f.write("%4s, %9s, %8s, %6s\n"%(solid[0], solid[1], solid[2], solid[3]))
                    # line = "%4s, %9s, %8s, %6s\n"%(solid[0], solid[1], solid[2], solid[3]); lineSolid.append(line)
        
        f.write("*BELT_THICKNESS_SUBTRACTION,\n")
        # line = "*BELT_THICKNESS_SUBTRACTION,\n"
        f.write(" %s, %s\n"%(self.Edit_BetweenBelts.text(), self.Edit_beltThickSubtraction.text()))
        # line = " %s, %s\n"%(self.Edit_BetweenBelts.text(), self.Edit_beltThickSubtraction.text()); lineSolid.append(line)
        f.write("*CORD_FILE=%s\n"%(self.Edit_cordFile.text()))
        # line = "*CORD_FILE=%s\n"%(self.Edit_cordFile.text()); lineSolid.append(line)
        if self.groupBox_Check.isChecked():       pci = 0
        else: pci = 1
        if self.check_LowCure.isChecked():       lcure = 1
        else: lcure = 0
        if pci ==1: 
            f.write("*IN_MOLDING_PCI_INFO, TYPE=%d ,LOWCURE=%d, BSD=%s, PCIRIMW=%s, BDWIDTH=%s, PCIPRS=%s\n"%(pci, lcure, \
                self.Edit_BSD.text(), self.Edit_PCI_RW_mm.text(), self.Edit_coreWidth.text(), self.Edit_PCI_press_kgf.text()))
        else: 
            f.write("*IN_MOLDING_PCI_INFO, TYPE=%d ,LOWCURE=%d, BSD=%s, PCIRIMW=%s, BDWIDTH=%s, PCIPRS=0\n"%(pci, lcure, \
                self.Edit_BSD.text(), self.Edit_PCI_RW_mm.text(), self.Edit_coreWidth.text() ))
        # line = "*IN_MOLDING_PCI_INFO, TYPE=%d ,LOWCURE=%d, BSD=%s, PCIRIMW=%s, BDWIDTH=%s, PCIPRS=%s\n"%(pci, lcure, \
            # self.Edit_BSD.text(), self.Edit_PCI_RW_mm.text(), self.Edit_coreWidth.text(), self.Edit_PCI_press_kgf.text())
        # lineSolid.append(line)

        # lineRebar =[]
        f.write("*REBAR_SECTION\n")
        # line = "*REBAR_SECTION\n"; lineRebar.append(line)
        rebarcompds= []
        for rebar in rebars:
            for txt in lstCode:## lstCode : code, physical name, topping compd, epi 
                if txt[0] == rebar[2]: 
                    cd =0
                    for cmpd in rebarcompds: 
                        if cmpd == txt[2]+".PYN": 
                            cd = 1
                            break 
                    if cd ==0: 
                        rebarcompds.append(txt[2]+".PYN")
                    break 

            if rebar[10] =='' :
                f.write("%4s, %4s, %10s, %6s, %6s, %4s, %6s, %10s\n"%(rebar[0], rebar[1], rebar[2], rebar[3], rebar[4], rebar[5], rebar[6], rebar[7]))
                # line = "%4s, %4s, %10s, %6s, %6s, %4s, %6s, %10s\n"%(rebar[0], rebar[1], rebar[2], rebar[3], rebar[4], rebar[5], rebar[6], rebar[7])
                # lineRebar.append(line)
            else:
                if float(rebar[8]) > 0 and float(rebar[9]) > 0 and float(rebar[11]) > 0: 
                    f.write("%4s, %4s, %10s, %6s, %6s, %4s, %6s, %10s, %10s, %10s, %10s, %10s\n"%(rebar[0], rebar[1], rebar[2], rebar[3], rebar[4], rebar[5], rebar[6], rebar[7], rebar[8], rebar[9], rebar[10], rebar[11] ))
                    # line = "%4s, %4s, %10s, %6s, %6s, %4s, %6s, %10s, %10s, %10s, %10s, %10s\n"%(rebar[0], rebar[1], rebar[2], rebar[3], rebar[4], rebar[5], rebar[6], rebar[7], rebar[8], rebar[9], rebar[10], rebar[11] )
                    # lineRebar.append(line)
                else: 
                    f.write("%4s, %4s, %10s, %6s, %6s, %4s, %6s, %10s\n"%(rebar[0], rebar[1], rebar[2], rebar[3], rebar[4], rebar[5], rebar[6], rebar[7]))
                    # line = "%4s, %4s, %10s, %6s, %6s, %4s, %6s, %10s\n"%(rebar[0], rebar[1], rebar[2], rebar[3], rebar[4], rebar[5], rebar[6], rebar[7])
                    # lineRebar.append(line)
        
        # for line in lineSolid: 
        #     f.write(line)
        # for line in lineRebar: 
        #     f.write(line)
        f.write("*****************************************************************************************************************************\n")

        

        for lst in rebarcompds: 
            fd = 0 
            for solid in initialCompd:
                if solid==lst: 
                    fd =1 
                    break 
            if fd ==0: 
                initialCompd.append(lst)

        for solid in initialCompd:
            f.write("*INCLUDE, INP=%s/%s\n"%(self.Edit_materialPosition.text(), solid ))
        
        f.write("*****************************************************************************************************************************\n")
        f.write("*INCLUDE, INP=%s\n"%(self.Edit_axiFile.text()))
        f.write("*INCLUDE, INP=%s\n"%(self.Edit_trdFile.text()))
        f.write("*****************************************************************************************************************************\n")
        f.write("*STEEL_BEAD_ELSET_FOR_SUB_CYCLING=%s\n"%(self.Edit_SubCycling.text()))
        f.write("*GROOVE_DEPTH_FOR_FPC  =%s\n"%(self.Edit_FPC_depth.text()))
        f.write("*RIM_FRICTION          =%s\n"%(self.Edit_RimFriction.text()))
        f.write("*ROAD_FRICTION (UO, ZP, KP, ZS, KS, ALPHA, TAUC, BETA)\n")
        f.write(" %s, %s, %s, %s, %s, %s, %s, %s\n"%(self.Edit_fric1.text(),self.Edit_fric2.text(),self.Edit_fric3.text(),self.Edit_fric4.text(),self.Edit_fric5.text(),self.Edit_fric6.text(),self.Edit_fric7.text(),self.Edit_fric8.text()))
        f.write("*****************************************************************************************************************************\n")
        f.close()

        print ("\n## SMART Input File was saved.")



    def TempReadInOut(self):
        if self.radio_Temp.isChecked(): 
            self.Edit_tempFile.setDisabled(True)
        else: 
            self.Edit_tempFile.setEnabled(True)
    def PCIRWmm(self): 
        try:
            self.PCIRWmm = round(float(self.Edit_PCI_RW_mm.text()), 2)
            self.Edit_PCI_RW_inch.setText(str(round(self.PCIRWmm/25.4, 2)))
        except:
            pass 

    def PCIRWInch(self): 
        try:
            self.PCIRWmm = round(float(self.Edit_PCI_RW_inch.text())*25.4, 2)
            self.Edit_PCI_RW_mm.setText(str(round(self.PCIRWmm, 2)))
        except:
            pass 

    def testRDmm(self): 
        try: 
            self.RD = round(float(self.Edit_RDmm.text()), 2)
            if self.RD ==0: return
            self.Edit_RDinch.setText(str(round(self.RD/25.4, 2)))
        except:
            pass 
    
    def RimInfoChanged(self): 
        self.testRDInch()
        self.testRWInch()
        if self.check_GroupTBR.isChecked() and self.check_Tube.isChecked(): 
            self.Edit_RimGeo.setText("/home/fiper/ISLM_RIM/RIM_TBTUBE.GEOM")
            self.check_LowCure.setChecked(True)
            self.radio_TBR.setChecked(True)
            self.groupBox_Check.setChecked(False)
        elif self.check_GroupTBR.isChecked() and not self.check_Tube.isChecked(): 
            self.Edit_RimGeo.setText("/home/fiper/ISLM_RIM/RIM_TB_TUBELESS.GEOM")
            self.check_LowCure.setChecked(True)
            self.radio_TBR.setChecked(True)
            self.groupBox_Check.setChecked(False)
        else:
            self.Edit_RimGeo.setText("/home/fiper/ISLM_RIM/RIM_PCLT.GEOM")
            self.check_LowCure.setChecked(False)
            if self.tireGroup == 2: 
                self.radio_LTR.setChecked(True)
            else:
                self.radio_PCR.setChecked(True)
            self.groupBox_Check.setChecked(True)

    def testRDInch(self): 
        try:
            if self.check_GroupTBR.isChecked(): group = 'TBR'
            else: group="PCR"
            if self.check_Tube.isChecked(): rimType="Tube"
            else: rimType = 'TL'
            self.RD = RimDiameter(float(self.Edit_RDinch.text()), group=group, rimType=rimType)
            # if self.RD ==0: 
            #     self.RD = round(float(self.Edit_RDinch.text())*25.4, 2)
            self.Edit_RDmm.setText(str(round(self.RD, 2)))
        except:
            pass 
    
    def testRWmm(self): 
        try:
            self.RW = round(float(self.Edit_RWmm.text()), 2)
            if self.RW ==0: return 
            self.Edit_RWInch.setText(str(round(self.RW/25.4, 2)))
        except:
            pass 

    def testRWInch(self):
        try:
            if self.check_GroupTBR.isChecked(): group = 'TBR'
            else: group="PCR"
            if self.check_Tube.isChecked(): rimType="Tube"
            else: rimType = 'TL'
            self.RW = RimWidth(float(self.Edit_RWInch.text()), group=group, rimType=rimType)
            # if self.RW ==0: 
            #     self.RW = round(float(self.Edit_RWInch.text())*25.4, 2)
            self.Edit_RWmm.setText(str(round(self.RW, 2)))
        except:
            pass 

    def loadKgf(self): 
        try:
            self.Load = float(self.Edit_loadKgf.text())
            self.Edit_loadLbs.setText(str(round(self.Load*2.205, 1)))
        except:
            pass 
    def loadLbf(self):
        try:
            self.Load = round(float(self.Edit_loadLbs.text())/2.205, 2)
            self.Edit_loadKgf.setText(str(self.Load))
        except:
            pass 
        
    def pressureKgf(self): 
        try: 
            self.Press = float(self.Edit_pressKgf.text())
            self.Edit_presskPa.setText(str(round(self.Press*98.07, 2)))
            self.Edit_pressPSI.setText(str(round(self.Press*14.22, 2)))
        except:
            pass 
    def pressureKpa(self): 
        try:
            self.Press = round(float(self.Edit_presskPa.text()) / 98.07, 2)
            self.Edit_pressKgf.setText(str(self.Press))
            self.Edit_pressPSI.setText(str(round(self.Press*14.22, 2)))
        except:
            pass 
    def pressurePsi(self): 
        try:
            self.Press = round(float(self.Edit_pressPSI.text()) / 14.22, 2)
            self.Edit_presskPa.setText(str(round(self.Press*98.07,2)))
            self.Edit_pressKgf.setText(str(self.Press))
        except:
            pass 

    def pressurePCIKgf(self): 
        try:
            self.PCIPress = float(self.Edit_PCI_press_kgf.text())
            self.Edit_PCI_press_kPa.setText(str(round(self.PCIPress*98.07, 2)))
            self.Edit_PCI_press_psi.setText(str(round(self.PCIPress*14.22, 2)))
        except:
            pass 
    def pressurePCIKpa(self): 
        try:
            self.PCIPress = round(float(self.Edit_PCI_press_kPa.text()) / 98.07, 2)
            self.Edit_PCI_press_kgf.setText(str(self.PCIPress))
            self.Edit_PCI_press_psi.setText(str(round(self.PCIPress*14.22, 2)))
        except:
            pass 
    def pressurePCIPsi(self): 
        try:
            self.PCIPress = round(float(self.Edit_PCI_press_psi.text()) / 14.22, 2)
            self.Edit_PCI_press_kPa.setText(str(round(self.PCIPress*98.07,2)))
            self.Edit_PCI_press_kgf.setText(str(self.PCIPress))
        except:
            pass 

    def readDefault(self, fname, mat=0)    : 
        if mat ==1: 
            for i in range(30): 
                for j in range(12): 
                    self.tableWidget.setItem(i, j,  QtWidgets.QTableWidgetItem(""))
        matlineCount=0
        
        with open(fname) as fp: 
            lines = fp.readlines()
        
        for line in lines: 
            words = line.split("=")
            if "**" in line: 
                continue 
            if "*" in line:

                if "Tire Group" in line: 
                    if "TBR" in words[1]: self.check_GroupTBR.setChecked(True)
                    else: self.check_GroupTBR.setChecked(False)

                if "Rim Type" in line: 
                    if "Tube" in words[1]: self.check_Tube.setChecked(True)
                    else: self.check_Tube.setChecked(False)

                if "PCI Total Time" in line: 
                    data = words[1].split(",") 
                    self.PCITime1 = float(data[0])
                    self.PCITime2 = float(data[1])
                    self.totalTime = float(data[2].strip())

                if "Output del Time" in line : 
                    self.delTime = float(words[1].strip())
                if "Result Averaging time" in line: 
                    self.avgTime = float(words[1].strip())
                if "Mass Scale, DT Ratio" in line: 
                    data = words[1].split(",")
                    self.massScale = float(data[0])
                    self.DtRatio = float(data[1].strip())
                if "self contact kerf/cavity" in line: 
                    data = words[1].split(",")
                    self.kerfContact = int(data[0])
                    self.cavityContact = int(data[1].strip())
                
                if "Temperature Analysis" in line : 
                    self.TemperatureAnalysis = float(words[1].strip())
                if "Temperature Start" in line : 
                    self.TempStart = float(words[1].strip())
                if "Temperature air, road" in line: 
                    data = words[1].split(",")
                    self.TempAir = float(data[0])
                    self.TempRoad = float(data[1].strip())

                if "Pressure Variance" in line: 
                    data = words[1].split(",")
                    self.PressVariance = float(data[0])
                    self.PressVarianceStart = float(data[1].strip())
                if "Hub" in line: 
                    data = words[1].split(",")
                    self.HubWidth = float(data[0])
                    self.HubHeight = float(data[1].strip())
                if "Temperature Result" in line: 
                    data = words[1].split(",")
                    self.TempResult = int(data[0])
                    self.TempResultFile = data[1].strip()
                
                if "body mesh" in line: 
                    self.axi = words[1].strip()
                if "tread mesh" in line: 
                    self.trd = words[1].strip()
                if "Belt Ga subtraction" in line: 
                    data = words[1].split(",")
                    self.btSubtraction = float(data[0])
                    self.Between = data[1].strip()
                if "Rim mass" in line: 
                    self.rimMass = float(words[1].strip())
                if "subcyclilng" in line: 
                    self.ElsetSubcycling = words[1].strip()
                if "FPC Depth" in line: 
                    self.FPC = float(words[1].strip())
                
                if "Test Pressure" in line: 
                    self.Press =  float(words[1].strip())

                if "Test Load" in line: 
                    self.Load =  float(words[1].strip())
                if "Velocity" in line: 
                    self.Velocity =  float(words[1].strip())
                if "Camber" in line: 
                    self.Camber = float(words[1].strip())
                if "Free spin" in line: 
                    self.freeSpin = int(words[1].strip())
                if "Lateral control" in line: 
                    data = words[1].split(",")
                    self.lateralValue = float(data[1].strip())
                    self.lateralForce = int(data[0])
                if "Rotation control" in line: 
                    data = words[1].split(",")
                    self.rotationValue = float(data[1].strip())
                    self.rotationForce = int(data[0])
                    self.angularVelocity = float(data[2].strip())

                if "Test Rim width" in line: 
                    self.RW = float(words[1].strip())
                if "Test Rim Dia" in line: 
                    self.RD = float(words[1].strip())
                if "Road Dia" in line: 
                    self.roadDia = float(words[1].strip())
                if "PIC_ON/OFF" in line: 
                    self.PCI = int(words[1].strip())
                if "Low Cure" in line: 
                    self.LowCure = int(words[1].strip())
                
                if "PCI Pressure" in line: 
                    if self.PCIPress ==0: 
                        self.PCIPress = float(words[1].strip())
                
                if "Rim Friction" in line: 
                    self.rimFriction = float(words[1].strip())
                if "Road Friction" in line: 
                    data = words[1].split(",")
                    self.roadFriction[0] = float(data[0].strip())
                    self.roadFriction[1] = float(data[1].strip())
                    self.roadFriction[2] = float(data[2].strip())
                    self.roadFriction[3] = float(data[3].strip())
                    self.roadFriction[4] = float(data[4].strip())
                    self.roadFriction[5] = float(data[5].strip())
                    self.roadFriction[6] = float(data[6].strip())
                    self.roadFriction[7] = float(data[7].strip())

                if "Tread surface" in line:
                    self.surf_tread = words[1].strip()
                if "Body surface" in line:
                    self.surf_body = words[1].strip()
                if "Press surface" in line:
                    self.surf_press = words[1].strip()
                if "Ric L surface" in line:
                    self.surf_RimL = words[1].strip()
                if "Ric R surface" in line:
                    self.surf_RimR = words[1].strip()

                if "Tire group" in line: 
                    self.tireGroup = int(words[1].strip())
                if "Stiffness KV, KL, KT" in line: 
                    data = words[1].split(",")
                    self.KV = float(data[0])
                    self.KL = float(data[1])
                    self.KT = float(data[2].strip())
                if "compound" in line: 
                    self.material = words[1].strip()
                if 'cord' in line: 
                    self.cord = words[1].strip()
                if 'Belt Lift' in line: 
                    self.beltLift = float(words[1].strip())
                if 'Carcass Drum Diameter' in line: 
                    self.carcassDrumDia = float(words[1].strip())
                if 'Carcass Ga' in line: 
                    self.carcassGa = float(words[1].strip())
                if "*Material properties" in line: 
                    materialLine = 1 
                else: 
                    materialLine = 0 

                if "BSD" in line: 
                    if mat==1: self.BSD = float(words[1].strip())
                if "BD width" in line: 
                    if mat==1: self.BDWidth = float(words[1].strip())
                if "PCI Rim Width" in line: 
                    if mat==1: self.PCIRW = float(words[1].strip())

            else:
                if materialLine ==1: 
                    if mat ==1: 
                        ds = line.split(",")
                        for k, d in enumerate(ds):
                            if d.strip()=='-': 
                                continue 
                            self.tableWidget.setItem(matlineCount,k, QtWidgets.QTableWidgetItem(d.strip()))
                        matlineCount+=1
                    else:
                        continue 
                    

        if mat ==1: 
            self.Edit_beltLift.setText("%.3f"%(self.beltLift))
            self.Edit_CcDrumDia.setText("%.3f"%(self.carcassDrumDia))
            self.Edit_CcGa.setText("%.3f"%(self.carcassGa))
        
    def saveDefault(self, fname="SMART_Default.dat", mat=0): 
        fname="SMART_Default.dat"
        try: subf = open(fname, 'w')
        except: 
            print(' File "D:\\01_ISLM_Scripts\\03_P3DM_TB\SMART_Input_UI.py"')
            print (" subf = open(%s, 'w')"%(fname) )
            print (" ValueError: Cannot open console input buffer for writing")
            return 
        
        if self.check_GroupTBR.isChecked(): group="TBR"
        else: 
            if self.radio_LTR.isChecked(): group="LTR"
            else: group="PCR"
        subf.write("*Tire Group=%s\n"%(group))
        if self.check_Tube.isChecked(): rimType = "Tube"
        else: rimType = "Tubeless"
        subf.write("*Rim Type=%s\n"%(rimType))
        subf.write("*PCI Total Time=%s, %s, %s\n"%(self.Edit_Inflation_Time1.text(), self.Edit_Inflation_Time2.text(), self.Edit_totalTime.text()))
        subf.write("*Output del Time=%s\n"%(self.Edit_stepTime.text()))
        subf.write("*Result Averaging time=%s\n"%(self.Edit_averageTime.text()))
        subf.write("*Mass Scale, DT Ratio=%s, %s\n"%(self.Edit_massScale.text(), self.Edit_DT_ratio.text()))
        if self.check_kerf.isChecked() : ch1 = 1
        else: ch1 = 0
        if self.check_Cavity.isChecked() : ch2 = 1
        else: ch2 = 0
        subf.write("*self contact kerf/cavity=%d, %d\n"%(ch1, ch2))
        subf.write("*groove depth=%s\n"%(self.Edit_grooveDepth.text()))
        if self.groupBox_4.isChecked(): ch = 1 
        else: ch = 0 
        subf.write("*Temperature Analysis=%d\n"%(ch))
        subf.write("*Temperature Start=%s\n"%(self.Edit_TempStartTime.text()))
        subf.write("*Temperature air, road = %s, %s\n"%(self.Edit_Temp_Air.text(), self.Edit_Temp_Road.text()))
        if self.check_pressVariance.isChecked(): ch = 1 
        else: ch = 0 
        subf.write("*Pressure Variance=%d, %s\n"%(ch, self.Edit_PressVarianceStartTime.text()))
        subf.write("*Hub =%s, %s\n"%(self.Edit_rimCavityWidth.text(), self.Edit_rimCavityHeight.text()))
        if self.radio_Temp.isChecked() : ch =0 
        elif self._tempOut.isChecked() : ch =1
        else: ch = 2  

        subf.write("*Temperature Result=%d, %s\n"%(ch, self.Edit_tempFile.text()))
        subf.write("*******************************************************\n")
        subf.write("*body mesh=%s\n"%(self.Edit_axiFile.text()))
        subf.write("*tread mesh=%s\n"%(self.Edit_trdFile.text()))
        subf.write("*Belt Ga subtraction=%s, %s\n"%(self.Edit_beltThickSubtraction.text(), self.Edit_BetweenBelts.text()))
        subf.write("*Rim mass = %s\n"%(self.Edit_RimMass.text()))
        subf.write("*subcyclilng=%s\n"%(self.Edit_SubCycling.text()))
        subf.write("*FPC Depth=%s\n"%(self.Edit_FPC_depth.text()))
        subf.write("*******************************************************\n")
        subf.write("*Test Pressure=%s\n"%(self.Edit_pressKgf.text()))
        subf.write("*Test Load=%s\n"%(self.Edit_loadKgf.text()))
        subf.write("*Velocity=%s\n"%(self.Edit_velocity.text()))
        subf.write("*Camber=%s\n"%(self.Edit_camber.text()))
        if self.check_freespin.isChecked(): ch=1 
        else: ch = 0 
        subf.write("*Free spin=%d\n"%(ch))
        if self.check_lateralForce.isChecked(): ch=0 
        else: ch = 1 
        subf.write("*Lateral control=%d, %s\n"%(ch, self.Edit_lateral.text()))
        if self.check_rotationForce.isChecked(): ch=0 
        else: ch = 1 
        subf.write("*Rotation control=%d, %s, %s\n"%(ch, self.Edit_Rotation.text(), self.Edit_angularVelocity.text()))
        subf.write("*Test Rim width=%s\n"%(self.Edit_RWmm.text()))
        subf.write("*Test Rim Dia=%s\n"%(self.Edit_RDmm.text()))
        subf.write("*Road Dia=%s\n"%(self.Edit_RoadDia.text()))
        if self.groupBox_Check.isChecked(): ch=1 
        else: ch = 0 
        subf.write("*PIC_ON/OFF=%d\n"%(ch))
        if self.check_LowCure.isChecked(): ch=1 
        else: ch = 0 
        subf.write("*Low Cure=%d\n"%(ch))

        subf.write("*BSD=%s\n"%(self.Edit_BSD.text()))
        subf.write("*BD width=%s\n"%(self.Edit_coreWidth.text()))
        subf.write("*PCI Pressure=%s\n"%(self.Edit_PCI_press_kgf.text()))
        subf.write("*PCI Rim Width=%s\n"%(self.Edit_PCI_RW_mm.text()))
        subf.write("*Rim Friction=%s\n"%(self.Edit_RimFriction.text()))
        subf.write("*Road Friction=%s, %s, %s, %s, %s, %s, %s, %s\n"%(self.Edit_fric1.text(), self.Edit_fric2.text(), self.Edit_fric3.text(), self.Edit_fric4.text(), self.Edit_fric5.text(), self.Edit_fric6.text(),self.Edit_fric7.text(), self.Edit_fric8.text()))
        subf.write("*Tread surface=%s\n"%(self.Edit_Surf_XTRD.text()))
        subf.write("*Body surface=%s\n"%(self.Edit_Surf_TireBody.text()))
        subf.write("*Press surface=%s\n"%(self.Edit_Surf_Press.text()))
        subf.write("*Ric L surface=%s\n"%(self.Edit_Surf_RicL.text()))
        subf.write("*Ric R surface=%s\n"%(self.Edit_Surf_RicR.text()))
        if self.radio_PCR.isChecked(): ch=1 
        if self.radio_LTR.isChecked(): ch=2 
        if self.radio_TBR.isChecked(): ch=3
        subf.write("*Tire group=%d\n"%(ch))
        subf.write("*Stiffness KV, KL, KT=%s, %s, %s\n"%(self.Edit_stiffness_KV.text(), self.Edit_stiffness_KL.text(), self.Edit_stiffness_KT.text()))

        subf.write("*compound=%s\n"%(self.Edit_materialPosition.text()))
        subf.write("*cord=%s\n"%(self.Edit_cordFile.text()))

        if mat==1: 
            btLift = self.Edit_beltLift.text()
            CcDrumDia=self.Edit_CcDrumDia.text()
            CcGa=self.Edit_CcGa.text()
            subf.write("*Belt Lift=%s\n"%(btLift))
            subf.write("*Carcass Drum Diameter=%s\n"%(CcDrumDia))
            subf.write("*Carcass Ga=%s\n"%(CcGa))
            subf.write("*Material properties\n")
            i = 0
            while i< 30: 
                try: 
                    eName = self.tableWidget.item(i, 0).text().strip()
                except:
                    subf.close()
                    return 
                if eName=="": 
                    subf.close()
                    return 
                Code = self.tableWidget.item(i, 1).text().strip()
                if "- Not available" in Code: 
                    Code = Code.split("-")[0].strip()
                temperature = self.tableWidget.item(i, 2).text().strip()
                stiffScale  = self.tableWidget.item(i, 3).text().strip()
                try: 
                    eType =  self.tableWidget.item(i, 4).text().strip()
                    Angle =  self.tableWidget.item(i, 5).text().strip()
                    Radius = self.tableWidget.item(i, 6).text().strip()
                    isSteel = self.tableWidget.item(i, 7).text().strip()
                except: 
                    eType = '-'; Angle='-'; Radius='-'; isSteel='-'
                try: 
                    Density = self.tableWidget.item(i, 8).text().strip()
                    scaleDensity = self.tableWidget.item(i, 9).text().strip()
                    volume = self.tableWidget.item(i, 10).text().strip()
                    wt = self.tableWidget.item(i, 11).text().strip()
                except: 
                    Density = '-'; scaleDensity ='-'; volume='-'; wt = '-'
                subf.write("%s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s\n"%(\
                    eName, Code, temperature, stiffScale, eType, Angle, Radius, isSteel, Density, scaleDensity, volume, wt))
                # print("%s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s\n"%(eName, Code, temperature, stiffScale, eType, Angle, Radius, isSteel, Density, scaleDensity, volume, wt))

                i += 1

        subf.close()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("tire.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Dialog.setWindowIcon(icon)
        
        self.groupBox.setTitle(_translate("Dialog", "Boundary Condition"))
        self.label.setText(_translate("Dialog", "Pressure"))
        self.Edit_pressKgf.setText(_translate("Dialog",  str(self.Press)))
        self.label_2.setText(_translate("Dialog", "kgf/cm2"))
        self.Edit_presskPa.setText(_translate("Dialog",  str(round(self.Press*98.07, 2))))
        self.label_3.setText(_translate("Dialog", "kPa"))
        self.label_4.setText(_translate("Dialog", "psi"))
        self.Edit_pressPSI.setText(_translate("Dialog",  str(round(self.Press*14.22, 2))))
        self.label_6.setText(_translate("Dialog", "lbs"))
        self.label_7.setText(_translate("Dialog", "Load"))
        self.Edit_loadLbs.setText(_translate("Dialog",  str(round(self.Load*2.205, 2))))
        self.Edit_loadKgf.setText(_translate("Dialog",  str(self.Load)))
        self.label_8.setText(_translate("Dialog", "kgf"))
        self.Edit_velocity.setText(_translate("Dialog",  str(self.Velocity)))
        self.label_15.setText(_translate("Dialog", "Velocity"))
        self.label_16.setText(_translate("Dialog", "km/h"))
        self.check_freespin.setText(_translate("Dialog", "Free spin"))
        if self.freeSpin ==1: 
            self.check_freespin.setChecked(True)
        else:
            self.check_freespin.setChecked(False)
        self.check_lateralForce.setText(_translate("Dialog", "Force "))
        if self.lateralForce ==1: 
            self.check_lateralForce.setChecked(True)
        else:
            self.check_lateralForce.setChecked(False)
        self.Edit_lateral.setText(_translate("Dialog",  str(self.lateralValue)))
        self.label_18.setText(_translate("Dialog", "Lateral Control"))
        self.label_17.setText(_translate("Dialog", "deg/kgf"))
        self.check_rotationForce.setText(_translate("Dialog", "Force "))
        if self.rotationForce ==1: 
            self.check_rotationForce.setChecked(True)
        else:
            self.check_rotationForce.setChecked(False)
        self.Edit_Rotation.setText(_translate("Dialog",  str(self.rotationValue)))
        self.label_19.setText(_translate("Dialog", "Rotation Control"))
        self.label_20.setText(_translate("Dialog", "%/kgf"))
        self.label_21.setText(_translate("Dialog", "Angular vel."))
        self.Edit_angularVelocity.setText(_translate("Dialog",  str(self.angularVelocity)))
        self.label_22.setText(_translate("Dialog", "Road Friction (UO, ZP, KP, ZS, KS, ALPHA, TAUC, BETA) "))
        self.label_9.setText(_translate("Dialog", "Rim Width"))
        self.label_13.setText(_translate("Dialog", "mm"))
        self.Edit_RWmm.setText(_translate("Dialog",  str(self.RW)))
        self.Edit_RWInch.setText(_translate("Dialog",  str(round(self.RW/25.4,2))))
        self.label_10.setText(_translate("Dialog", "Inch"))
        self.Edit_fric1.setText(_translate("Dialog",  str(self.roadFriction[0])))
        self.Edit_fric2.setText(_translate("Dialog",  str(self.roadFriction[1])))
        self.Edit_fric3.setText(_translate("Dialog",  str(self.roadFriction[2])))
        self.Edit_fric4.setText(_translate("Dialog",  str(self.roadFriction[3])))
        self.Edit_fric5.setText(_translate("Dialog",  str(self.roadFriction[4])))
        self.Edit_fric6.setText(_translate("Dialog",  str(self.roadFriction[5])))
        self.Edit_fric7.setText(_translate("Dialog",  str(self.roadFriction[6])))
        self.Edit_fric8.setText(_translate("Dialog",  str(self.roadFriction[7])))
        self.Edit_RoadDia.setText(_translate("Dialog",  str(self.roadDia)))
        self.label_27.setText(_translate("Dialog", "Road Geometry"))
        self.label_28.setText(_translate("Dialog", "m (0=flat)"))
        self.label_39.setText(_translate("Dialog", "mm"))
        self.Edit_RDmm.setText(_translate("Dialog",  str(self.RD)))
        self.label_40.setText(_translate("Dialog", "Rim Diameter"))
        self.Edit_RDinch.setText(_translate("Dialog", str(round(self.RD/25.4, 1))))
        self.label_41.setText(_translate("Dialog", "Inch"))
        self.Edit_RimFriction.setText(_translate("Dialog",  str(self.rimFriction )))
        self.label_50.setText(_translate("Dialog", "Rim Friction"))
        self.groupBox_Check.setTitle(_translate("Dialog", "PCI"))
        self.label_65.setText(_translate("Dialog", "Rim Width"))
        self.label_66.setText(_translate("Dialog", "Pressure"))
        self.Edit_PCI_press_kPa.setText(_translate("Dialog",  str(self.PCIPress*98.07)))
        
        self.Edit_PCI_press_psi.setText(_translate("Dialog",  str(self.PCIPress*14.22)))
        self.label_68.setText(_translate("Dialog", "kPa"))
        self.Edit_PCI_press_kgf.setText(_translate("Dialog",  str(self.PCIPress)))
        
        self.label_67.setText(_translate("Dialog", "mm"))
        self.Edit_PCI_RW_inch.setText(_translate("Dialog",  str(round(self.PCIRIMW/25.4, 1))))
        self.label_69.setText(_translate("Dialog", "kgf/cm2"))
        self.Edit_PCI_RW_mm.setText(_translate("Dialog",  str(self.PCIRIMW)))

        self.label_70.setText(_translate("Dialog", "Inch"))
        self.label_71.setText(_translate("Dialog", "psi"))
        self.check_LowCure.setText(_translate("Dialog", "Low Temperature Cure"))
        self.Edit_BSD.setText(_translate("Dialog",  str(self.BSD)))
        
        self.label_72.setText(_translate("Dialog", "BSD(mm)"))
        self.Edit_coreWidth.setText(_translate("Dialog",  str(self.BDWidth)))
        self.label_73.setText(_translate("Dialog", "BD Cord Width(mm)"))
        self.groupBox_2.setTitle(_translate("Dialog", "Define Simulation"))
        self.Edit_Inflation_Time1.setText(_translate("Dialog", str(self.PCITime1)))
        self.label_11.setText(_translate("Dialog", "Inflation Time (PCI)"))
        self.label_29.setText(_translate("Dialog", "/"))
        self.label_30.setText(_translate("Dialog", "sec"))
        self.label_31.setText(_translate("Dialog", "Total Time"))
        self.Edit_totalTime.setText(_translate("Dialog", str(self.totalTime)))
        self.Edit_Inflation_Time2.setText(_translate("Dialog", str(self.PCITime2)))
        self.label_32.setText(_translate("Dialog", "sec"))
        self.label_33.setText(_translate("Dialog", "sec"))
        self.label_34.setText(_translate("Dialog", "Output Time Step(Δt)"))
        self.Edit_stepTime.setText(_translate("Dialog", str(self.delTime)))
        self.label_35.setText(_translate("Dialog", "sec"))
        self.Edit_averageTime.setText(_translate("Dialog", str(self.avgTime)))
        self.label_36.setText(_translate("Dialog", "Result Averaging Time"))
        self.Edit_DT_ratio.setText(_translate("Dialog", str(self.DtRatio)))
        self.Edit_massScale.setText(_translate("Dialog", str(self.massScale)))
        self.label_37.setText(_translate("Dialog", "Mass Scale"))
        self.label_38.setText(_translate("Dialog", "<html><head/><body><p><span style=\" color:#747474;\">DT Ratio</span></p></body></html>"))
        self.groupBox_3.setTitle(_translate("Dialog", "Self Contact"))
        self.check_kerf.setText(_translate("Dialog", "Tread Kerf"))
        self.check_Cavity.setText(_translate("Dialog", "Inner Cavity"))
        self.Edit_grooveDepth.setText(_translate("Dialog", str(self.GD)))
        self.label_42.setText(_translate("Dialog", "Groove Depth"))
        self.groupBox_4.setTitle(_translate("Dialog", "Temprature Analysis"))
        self.Edit_TempStartTime.setText(_translate("Dialog", str(self.TempStart)))
        self.label_43.setText(_translate("Dialog", "Air Start Time"))
        self.label_44.setText(_translate("Dialog", "Air Temperature "))
        self.Edit_Temp_Air.setText(_translate("Dialog", str(self.TempAir)))
        self.label_45.setText(_translate("Dialog", "Road Temperature "))
        self.Edit_Temp_Road.setText(_translate("Dialog", str(self.TempRoad)))
        self.check_pressVariance.setText(_translate("Dialog", "Pressure Variance: Start Time"))
        self.Edit_PressVarianceStartTime.setText(_translate("Dialog", str(self.PressVarianceStart)))
        self.label_46.setText(_translate("Dialog", "sec"))
        self.label_47.setText(_translate("Dialog", "sec"))
        self.Edit_rimCavityHeight.setText(_translate("Dialog", str(self.HubHeight)))
        self.Edit_rimCavity.setText(_translate("Dialog", "Height"))
        self.label_49.setText(_translate("Dialog", "Rim Hub Cavity  Width"))
        self.Edit_rimCavityWidth.setText(_translate("Dialog", str(self.HubWidth)))
        self.radio_Temp.setText(_translate("Dialog", "No  Result In/Out"))
        self._tempOut.setText(_translate("Dialog", "Result Out"))
        self.radio_TempReading.setText(_translate("Dialog", "Result reading "))
        self.Edit_tempFile.setText(_translate("Dialog", str(self.TempResultFile)))
        self.groupBox_5.setTitle(_translate("Dialog", "Tire Model"))
        self.label_51.setText(_translate("Dialog", "Body mesh"))
        self.label_52.setText(_translate("Dialog", "Tread mesh"))
        self.groupBox_6.setTitle(_translate("Dialog", "Surfaces"))
        self.Edit_Surf_XTRD.setText(_translate("Dialog", str(self.surf_tread)))
        self.label_53.setText(_translate("Dialog", "Tread"))
        self.Edit_Surf_TireBody.setText(_translate("Dialog", str(self.surf_body)))
        self.label_54.setText(_translate("Dialog", "Body"))
        self.label_55.setText(_translate("Dialog", "Press"))
        self.Edit_Surf_Press.setText(_translate("Dialog", str(self.surf_press)))
        self.Edit_Surf_RicL.setText(_translate("Dialog", str(self.surf_RimL)))
        self.label_56.setText(_translate("Dialog", "RIC_L"))
        self.Edit_Surf_RicR.setText(_translate("Dialog", str(self.surf_RimR)))
        self.label_57.setText(_translate("Dialog", "RIC_R"))
        self.groupBox_7.setTitle(_translate("Dialog", "Stiffness"))
        self.Edit_stiffness_KV.setText(_translate("Dialog", str(self.KV)))
        self.label_58.setText(_translate("Dialog", "KV"))
        self.Edit_stiffness_KL.setText(_translate("Dialog",  str(self.KL)))
        self.label_59.setText(_translate("Dialog", "KL"))
        self.label_60.setText(_translate("Dialog", "KT"))
        self.Edit_stiffness_KT.setText(_translate("Dialog",  str(self.KT)))
        
        self.radio_PCR.setText(_translate("Dialog", "PCR"))
        self.radio_LTR.setText(_translate("Dialog", "LTR"))
        self.radio_TBR.setText(_translate("Dialog", "TBR"))
        if self.tireGroup==1:    self.radio_PCR.setChecked(True)
        elif self.tireGroup==2:    self.radio_LTR.setChecked(True)
        else: self.radio_TBR.setChecked(True)

        self.label_61.setText(_translate("Dialog", "<html><head/><body><p><span style=\" color:#747474;\">Rim Real Mass </span></p></body></html>"))
        
        self.Edit_RimMass.setText(_translate("Dialog",  str(self.rimMass)))
        self.Edit_RimMass.setToolTip(_translate("Dialog", "<html><head/><body><p>RIM=1.0</p><p>LAT100=0.05</p><p>NPT=1.0</p></body></html>"))
        
        self.Edit_SubCycling.setText(_translate("Dialog",  str(self.ElsetSubcycling)))
        # self.label_62.setText(_translate("Dialog", "Elset For Sub cycling"))
        self.label_62.setText(_translate("Dialog", "<html><head/><body><p><span style=\" color:#747474;\">Elset For Sub cycling</span></p></body></html>"))
        self.Edit_FPC_depth.setText(_translate("Dialog",  str(self.FPC)))
        
        self.label_63.setText(_translate("Dialog", "<html><head/><body><p><span style=\" color:#747474;\">Groove Depth for FPC</span></p></body></html>"))

        self.label_64.setText(_translate("Dialog", "m"))
        self.groupBox_9.setTitle(_translate("Dialog", "Material Properties"))
        self.Edit_materialPosition.setText(_translate("Dialog",  str(self.material)))
        self.label_74.setText(_translate("Dialog", "Comp'd"))
        self.Edit_cordFile.setText(_translate("Dialog",  str(self.cord)))
        self.label_75.setText(_translate("Dialog", "Cord"))

        self.label_76.setText(_translate("Dialog", "Belt Thickness Subtraction"))
        self.Edit_beltThickSubtraction.setText(_translate("Dialog", str(self.btSubtraction)))
        self.Edit_BetweenBelts.setText(_translate("Dialog", self.Between))
        self.pushSave.setText(_translate("Dialog", "SMART INPUT SAVE"))
        self.pushDefault.setText(_translate("Dialog", "Save Default"))

        self.Edit_beltLift.setText(_translate("Dialog", "1.03"))
        self.label_77.setText(_translate("Dialog", "BT Lift"))
        self.label_78.setText(_translate("Dialog", "Cc Drum Dia."))
        self.push_caculation.setText(_translate("Dialog", "Update"))
        self.Edit_CcGa.setText(_translate("Dialog", "1.0"))
        self.label_ccGa.setText(_translate("Dialog", "Cc Ga."))

        self.label_camber_deg.setText(_translate("Dialog", "deg"))
        self.Edit_camber.setText(_translate("Dialog", "0"))
        self.label_camber.setText(_translate("Dialog", "Camber"))

        self.pushDefault.setText(_translate("Dialog", "Save Default"))
        self.push_openSample.setText(_translate("Dialog", "Open Sample"))

        self.Edit_RimGeo.setText(_translate("Dialog", "/home/fiper/ISLM_RIM/RIM_PCLT.GEOM"))
        
        self.check_GroupTBR.setText(_translate("Dialog", "TBR"))
        self.check_Tube.setText(_translate("Dialog", "Tube Type"))

        self.push_showCompd.setText(_translate("Dialog", "Show Comp\'d List"))
        self.push_showCord.setText(_translate("Dialog", "Show Cord List"))

        self.Edit_SA_Start.setText(_translate("Dialog", "0"))
        self.label_RelaxationFy_SA.setText(_translate("Dialog", "Slip Angle Initial"))
        self.Edit_SA_TimeStart.setText(_translate("Dialog", "0"))
        self.Edit_SA_TimeDuration.setText(_translate("Dialog", "0"))
        self.label_RelaxationFy_Time.setText(_translate("Dialog", "Time Start / Del T"))
        self.Edit_SR_TimeDuration.setText(_translate("Dialog", "0"))
        self.Edit_SR_TimeStart.setText(_translate("Dialog", "0"))

        ###########################################################
        ## Tips..
        self.Edit_RoadDia.setToolTip(_translate("Dialog", "<html><head/><body><p>Flat = 0.0</p><p>RR = 1.707</p><p>Cleat = 2.5 </p><p>Wear = 3.048 </p><p>LAT100 = 0.317</p></body></html>"))
        self.Edit_totalTime.setToolTip(_translate("Dialog", "<html><head/><body><p>Physical simulation time</p></body></html>"))
        self.Edit_DT_ratio.setToolTip(_translate("Dialog", "<html><head/><body><p>IF =1.0=&gt;VARIABLE</p><p>IF &lt; 1.0 =&gt; FIXED FOR FFT</p></body></html>"))
        self.Edit_massScale.setToolTip(_translate("Dialog", "<html><head/><body><p>Default : 1.02</p></body></html>"))
        self.Edit_grooveDepth.setToolTip(_translate("Dialog", "<html><head/><body><p>Unit: [mm]</p></body></html>"))
        self.Edit_rimCavityHeight.setToolTip(_translate("Dialog", "<html><head/><body><p>Rim Added Depth</p></body></html>"))
        self.Edit_rimCavityWidth.setToolTip(_translate("Dialog", "<html><head/><body><p>Rim Added Width</p></body></html>"))
        self.Edit_RimMass.setToolTip(_translate("Dialog", "<html><head/><body><p>RIM=1.0</p><p>LAT100=0.05</p><p>NPT=1.0</p></body></html>"))
        self.Edit_beltThickSubtraction.setToolTip(_translate("Dialog", "<html><head/><body><p>Unit :[m]</p></body></html>"))
        ###########################################################

    def openMaterialFile(self):
        cwd = os.getcwd()
        fname = cwd +"/ISLM_materialList.txt"
        self.p=QtCore.QProcess()
        self.p.start("notepad", [fname]) 

    def openCordFile(self): 
        cwd = os.getcwd()
        fname = cwd +"/ISLM_CordList.dat"
        self.p=QtCore.QProcess()
        self.p.start("notepad", [fname])

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
